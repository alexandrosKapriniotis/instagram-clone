{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { fetchUserPosts } from \"../../redux/actions/index\";\nimport { storage, auth, db } from \"../../firebase\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { serverTimestamp, collection, setDoc, doc } from 'firebase/firestore';\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Save(props) {\n  var navigation = useNavigation();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      caption = _useState2[0],\n      setCaption = _useState2[1];\n\n  var image = props.route.params.image;\n  var childPath = \"post/\" + auth.currentUser.uid + \"/\" + Math.random().toString(36);\n\n  var uploadImage = function uploadImage() {\n    var response, blob, storageRef, task, taskProgress, taskCompleted, taskError;\n    return _regeneratorRuntime.async(function uploadImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(image));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 5:\n            blob = _context.sent;\n            storageRef = ref(storage, childPath);\n            task = uploadBytesResumable(storageRef, blob, {\n              contentType: 'image/jpeg'\n            });\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transferred: \" + snapshot.bytesTransferred);\n            };\n\n            taskCompleted = function taskCompleted() {\n              getDownloadURL(task.snapshot.ref).then(function (downloadURL) {\n                savePostData(downloadURL, caption);\n                console.log('File available at', downloadURL);\n              });\n            };\n\n            taskError = function taskError(error) {\n              console.log(error);\n            };\n\n            task.on('state_changed', taskProgress, taskError, taskCompleted);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var savePostData = function savePostData(downloadURL, caption) {\n    var subColRef;\n    return _regeneratorRuntime.async(function savePostData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            subColRef = collection(db, \"posts\", auth.currentUser.uid, \"userPosts\");\n            setDoc(doc(subColRef), {\n              downloadURL: downloadURL,\n              caption: caption,\n              creation: serverTimestamp()\n            }).then(function () {\n              props.fetchUserPosts();\n              navigation.navigate('BottomTabs', {\n                screen: 'Home'\n              });\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Image, {\n      source: {\n        uri: image\n      }\n    }), _jsx(TextInput, {\n      style: styles.caption,\n      placeholder: \"Write a Caption . . .\",\n      onChangeText: function onChangeText(caption) {\n        setCaption(caption);\n      }\n    }), _jsx(Button, {\n      title: \"Save\",\n      onPress: uploadImage\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  caption: {\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 150,\n    backgroundColor: '#FFF'\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUserPosts: fetchUserPosts\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(Save);","map":{"version":3,"sources":["C:/Users/sim2a/Documents/codes/instagram-clone/components/Add/Save.js"],"names":["React","useState","bindActionCreators","connect","fetchUserPosts","storage","auth","db","ref","uploadBytesResumable","getDownloadURL","serverTimestamp","collection","setDoc","doc","useNavigation","Save","props","navigation","caption","setCaption","image","route","params","childPath","currentUser","uid","Math","random","toString","uploadImage","fetch","response","blob","storageRef","task","contentType","taskProgress","snapshot","console","log","bytesTransferred","taskCompleted","then","downloadURL","savePostData","taskError","error","on","subColRef","creation","navigate","screen","styles","container","uri","StyleSheet","create","flex","padding","alignItems","justifyContent","height","backgroundColor","mapStateToProps","store","userState","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { View, StyleSheet, Image, TextInput,Button } from 'react-native';\r\n\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { fetchUserPosts } from '../../redux/actions/index';\r\nimport { storage,auth,db } from '../../firebase'\r\nimport { ref, uploadBytesResumable,getDownloadURL } from \"firebase/storage\";\r\nimport { serverTimestamp,collection,setDoc,doc } from 'firebase/firestore';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nfunction Save(props) {\r\n  const navigation = useNavigation();  \r\n  const [caption,setCaption] = useState();  \r\n  const image = props.route.params.image;\r\n  const childPath = `post/${auth.currentUser.uid}/${Math.random().toString(36)}`;\r\n\r\n  const uploadImage = async () => {      \r\n    const response = await fetch(image);\r\n    const blob     = await response.blob();\r\n\r\n    const storageRef = ref(storage,childPath);\r\n    \r\n    const task = uploadBytesResumable(storageRef, blob, {contentType: 'image/jpeg'});\r\n\r\n    const taskProgress = snapshot => {\r\n        console.log(`transferred: ${snapshot.bytesTransferred}`)\r\n    }\r\n\r\n    const taskCompleted = () => {\r\n        getDownloadURL(task.snapshot.ref).then((downloadURL) => {\r\n            savePostData(downloadURL,caption);\r\n            console.log('File available at', downloadURL);\r\n        });\r\n    }\r\n\r\n    const taskError = (error) => {\r\n        console.log(error)\r\n    }\r\n\r\n    task.on('state_changed',taskProgress,taskError,taskCompleted);\r\n  }\r\n\r\n  const savePostData = async (downloadURL,caption) => {\r\n    const subColRef = collection(db, \"posts\", auth.currentUser.uid, \"userPosts\");\r\n    setDoc(doc(subColRef), {\r\n        downloadURL,\r\n        caption,\r\n        creation: serverTimestamp()\r\n    }).then((function () {\r\n        props.fetchUserPosts()\r\n        navigation.navigate('BottomTabs',{ screen: 'Home'});\r\n    }));\r\n      \r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n        <Image source={{uri: image}} />\r\n        <TextInput \r\n            style={styles.caption}\r\n            placeholder=\"Write a Caption . . .\"\r\n            onChangeText={(caption) => {setCaption(caption)}}\r\n        />\r\n        <Button title='Save' onPress={uploadImage} />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n      flex: 1\r\n  },\r\n  caption: {\r\n    padding: 10,    \r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    height: 150,\r\n    backgroundColor: '#FFF'\r\n  }\r\n});\r\n\r\nconst mapStateToProps = (store) => ({\r\n  currentUser: store.userState.currentUser\r\n})\r\n\r\nconst mapDispatchProps = (dispatch) => bindActionCreators({ fetchUserPosts }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(Save);\r\n"]},"metadata":{},"sourceType":"module"}