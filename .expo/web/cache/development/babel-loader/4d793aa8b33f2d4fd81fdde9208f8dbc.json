{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Validator from 'email-validator';\nimport { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { doc, setDoc } from \"firebase/firestore\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport { firebaseApp, db } from \"../../firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nLogBox.ignoreLogs(['Setting a timer for a long period of time']);\n\nfunction signupForm(_ref) {\n  var navigation = _ref.navigation;\n  var signupFormSchema = yup.object().shape({\n    email: yup.string().email().required('An email is required'),\n    username: yup.string().required().min(2, 'A username is required and has to be at least 2 characters'),\n    password: yup.string().required().min(6, 'Your password has to have at least 6 characters')\n  });\n\n  var getRandomProfilePicture = function getRandomProfilePicture() {\n    var response, data;\n    return _regeneratorRuntime.async(function getRandomProfilePicture$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://randomuser.me/api/'));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data.results[0].picture.large);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var saveUser = function saveUser(user) {\n    return _regeneratorRuntime.async(function saveUser$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.t0 = _regeneratorRuntime;\n            _context2.t1 = setDoc;\n            _context2.t2 = doc(db, \"users\", user.uid);\n            _context2.t3 = user.uid;\n            _context2.t4 = user.username;\n            _context2.t5 = user.email;\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(getRandomProfilePicture());\n\n          case 9:\n            _context2.t6 = _context2.sent;\n            _context2.t7 = {\n              owner_uid: _context2.t3,\n              username: _context2.t4,\n              email: _context2.t5,\n              profile_picture: _context2.t6\n            };\n            _context2.t8 = (0, _context2.t1)(_context2.t2, _context2.t7).catch(function (error) {\n              console.log('Something went wrong', error.message);\n            });\n            _context2.next = 14;\n            return _context2.t0.awrap.call(_context2.t0, _context2.t8);\n\n          case 14:\n            _context2.next = 19;\n            break;\n\n          case 16:\n            _context2.prev = 16;\n            _context2.t9 = _context2[\"catch\"](0);\n            console.log('Something went wrong', _context2.t9.message);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  };\n\n  var onSignup = function onSignup(email, username, password) {\n    var auth;\n    return _regeneratorRuntime.async(function onSignup$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            auth = getAuth(firebaseApp);\n            createUserWithEmailAndPassword(auth, email, password).then(function (userCredential) {\n              var user = userCredential.user;\n              saveUser({\n                uid: user.uid,\n                email: user.email,\n                username: username\n              });\n              navigation.goBack();\n            }).catch(function (error) {\n              var errorMessage = error.message;\n              console.log('Something went wrong', errorMessage);\n            });\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Formik, {\n      initialValues: {\n        email: '',\n        username: '',\n        password: ''\n      },\n      onSubmit: function onSubmit(values) {\n        return onSignup(values.email, values.username, values.password);\n      },\n      validationSchema: signupFormSchema,\n      validateOnMount: true,\n      children: function children(_ref2) {\n        var handleBlur = _ref2.handleBlur,\n            handleChange = _ref2.handleChange,\n            handleSubmit = _ref2.handleSubmit,\n            values = _ref2.values,\n            errors = _ref2.errors,\n            isValid = _ref2.isValid;\n        return _jsxs(_Fragment, {\n          children: [_jsx(View, {\n            style: [styles.inputField, {\n              borderColor: values.email.length < 1 || Validator.validate(values.email) ? '#ddd' : 'red'\n            }],\n            children: _jsx(TextInput, {\n              placeholder: \"Email\",\n              autoCapitalize: \"none\",\n              keyboardType: \"email-address\",\n              textContentType: \"emailAddress\",\n              autoFocus: true,\n              onChangeText: handleChange('email'),\n              onBlur: handleBlur('email'),\n              value: values.email\n            })\n          }), _jsx(View, {\n            style: [styles.inputField, {\n              borderColor: values.username.length === 0 || values.username.length > 2 || Validator.validate(values.username) ? '#ddd' : 'red'\n            }],\n            children: _jsx(TextInput, {\n              placeholder: \"Username\",\n              autoCapitalize: \"none\",\n              textContentType: \"username\",\n              onChangeText: handleChange('username'),\n              onBlur: handleBlur('username'),\n              value: values.username\n            })\n          }), _jsx(View, {\n            style: [styles.inputField, {\n              borderColor: values.password.length < 1 || values.password.length >= 6 ? '#ddd' : 'red'\n            }],\n            children: _jsx(TextInput, {\n              placeholder: \"Password\",\n              autoCapitalize: \"none\",\n              autoCorrect: false,\n              secureTextEntry: true,\n              textContentType: \"password\",\n              onChangeText: handleChange('password'),\n              onBlur: handleBlur('password'),\n              value: values.password\n            })\n          }), _jsx(Pressable, {\n            style: styles.button(isValid),\n            onPress: handleSubmit,\n            disabled: !isValid,\n            children: _jsx(Text, {\n              style: styles.buttonText,\n              children: \"Sign up\"\n            })\n          }), _jsxs(View, {\n            style: styles.loginContainer,\n            children: [_jsx(Text, {\n              children: \"Already have an account? \"\n            }), _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                return navigation.push('LoginScreen');\n              },\n              children: _jsx(Text, {\n                style: styles.loginText,\n                children: \"Login\"\n              })\n            })]\n          })]\n        });\n      }\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 50\n  },\n  inputField: {\n    borderRadius: 4,\n    padding: 10,\n    backgroundColor: '#FAFAFA',\n    marginBottom: 10,\n    borderWidth: 1,\n    borderColor: '#DDD'\n  },\n  button: function button(isValid) {\n    return {\n      backgroundColor: isValid ? '#0096F6' : '#9aCAF7',\n      alignItems: 'center',\n      justifyContent: 'center',\n      color: '#FFF',\n      fontSize: 20,\n      minHeight: 42,\n      borderRadius: 4\n    };\n  },\n  buttonText: {\n    fontWeight: '600',\n    color: '#FFF'\n  },\n  loginContainer: {\n    flexDirection: 'row',\n    width: '100%',\n    justifyContent: 'center',\n    marginTop: 50\n  },\n  loginText: {\n    color: '#6BB0F5'\n  }\n});\nexport default signupForm;","map":{"version":3,"sources":["C:/Users/sim2a/Documents/codes/instagram-clone/components/signupScreen/signupForm.js"],"names":["React","Formik","yup","Validator","getAuth","createUserWithEmailAndPassword","doc","setDoc","firebaseApp","db","LogBox","ignoreLogs","signupForm","navigation","signupFormSchema","object","shape","email","string","required","username","min","password","getRandomProfilePicture","fetch","response","json","data","results","picture","large","saveUser","user","uid","owner_uid","profile_picture","catch","error","console","log","message","onSignup","auth","then","userCredential","goBack","errorMessage","styles","container","values","handleBlur","handleChange","handleSubmit","errors","isValid","inputField","borderColor","length","validate","button","buttonText","loginContainer","push","loginText","StyleSheet","create","marginTop","borderRadius","padding","backgroundColor","marginBottom","borderWidth","alignItems","justifyContent","color","fontSize","minHeight","fontWeight","flexDirection","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;AAEA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,OAAT,EAAkBC,8BAAlB,QAAwD,eAAxD;AACA,SAASC,GAAT,EAAcC,MAAd,QAA4B,oBAA5B;;AAGA,SAASC,WAAT,EAAsBC,EAAtB;;;;AAEAC,MAAM,CAACC,UAAP,CAAkB,CAAC,2CAAD,CAAlB;;AAEA,SAASC,UAAT,OAAkC;AAAA,MAAbC,UAAa,QAAbA,UAAa;AAChC,MAAMC,gBAAgB,GAAGZ,GAAG,CAACa,MAAJ,GAAaC,KAAb,CAAmB;AAC1CC,IAAAA,KAAK,EAAEf,GAAG,CAACgB,MAAJ,GAAaD,KAAb,GAAqBE,QAArB,CAA8B,sBAA9B,CADmC;AAE1CC,IAAAA,QAAQ,EAAElB,GAAG,CAACgB,MAAJ,GAAaC,QAAb,GAAwBE,GAAxB,CAA4B,CAA5B,EAA8B,4DAA9B,CAFgC;AAG1CC,IAAAA,QAAQ,EAAEpB,GAAG,CAACgB,MAAJ,GAAaC,QAAb,GAAwBE,GAAxB,CAA4B,CAA5B,EAA8B,iDAA9B;AAHgC,GAAnB,CAAzB;;AAMA,MAAME,uBAAuB,GAAG,SAA1BA,uBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACLC,KAAK,CAAC,4BAAD,CADA;;AAAA;AACtBC,YAAAA,QADsB;AAAA;AAAA,6CAELA,QAAQ,CAACC,IAAT,EAFK;;AAAA;AAEtBC,YAAAA,IAFsB;AAAA,6CAIrBA,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBC,OAAhB,CAAwBC,KAJH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAOA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAELzB,MAFK;AAAA,2BAEED,GAAG,CAACG,EAAD,EAAK,OAAL,EAAauB,IAAI,CAACC,GAAlB,CAFL;AAAA,2BAGID,IAAI,CAACC,GAHT;AAAA,2BAIGD,IAAI,CAACZ,QAJR;AAAA,2BAKAY,IAAI,CAACf,KALL;AAAA;AAAA,6CAMgBM,uBAAuB,EANvC;;AAAA;AAAA;AAAA;AAGPW,cAAAA,SAHO;AAIPd,cAAAA,QAJO;AAKPH,cAAAA,KALO;AAMPkB,cAAAA,eANO;AAAA;AAAA,yEAONC,KAPM,CAOA,UAAAC,KAAK,EAAI;AAChBC,cAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD,aATQ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWXF,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmC,aAAMC,OAAzC;;AAXW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAgBA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAOxB,KAAP,EAAaG,QAAb,EAAsBE,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACToB,YAAAA,IADS,GACFtC,OAAO,CAACI,WAAD,CADL;AAGfH,YAAAA,8BAA8B,CAACqC,IAAD,EAAOzB,KAAP,EAAcK,QAAd,CAA9B,CACGqB,IADH,CACS,UAACC,cAAD,EAAoB;AAEzB,kBAAMZ,IAAI,GAAGY,cAAc,CAACZ,IAA5B;AAEAD,cAAAA,QAAQ,CAAC;AAACE,gBAAAA,GAAG,EAAED,IAAI,CAACC,GAAX;AAAehB,gBAAAA,KAAK,EAAEe,IAAI,CAACf,KAA3B;AAAiCG,gBAAAA,QAAQ,EAARA;AAAjC,eAAD,CAAR;AACAP,cAAAA,UAAU,CAACgC,MAAX;AACD,aAPH,EAQGT,KARH,CAQS,UAACC,KAAD,EAAW;AAChB,kBAAMS,YAAY,GAAGT,KAAK,CAACG,OAA3B;AAEAF,cAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmCO,YAAnC;AACD,aAZH;;AAHe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAkBA,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,cACI,KAAC,MAAD;AACI,MAAA,aAAa,EAAE;AAAC/B,QAAAA,KAAK,EAAE,EAAR;AAAWG,QAAAA,QAAQ,EAAE,EAArB;AAAwBE,QAAAA,QAAQ,EAAE;AAAlC,OADnB;AAEI,MAAA,QAAQ,EAAE,kBAAC2B,MAAD;AAAA,eAAYR,QAAQ,CAACQ,MAAM,CAAChC,KAAR,EAAcgC,MAAM,CAAC7B,QAArB,EAA8B6B,MAAM,CAAC3B,QAArC,CAApB;AAAA,OAFd;AAGI,MAAA,gBAAgB,EAAER,gBAHtB;AAII,MAAA,eAAe,EAAE,IAJrB;AAAA,gBAMC;AAAA,YAAEoC,UAAF,SAAEA,UAAF;AAAA,YAAaC,YAAb,SAAaA,YAAb;AAAA,YAA0BC,YAA1B,SAA0BA,YAA1B;AAAA,YAAuCH,MAAvC,SAAuCA,MAAvC;AAAA,YAA8CI,MAA9C,SAA8CA,MAA9C;AAAA,YAAqDC,OAArD,SAAqDA,OAArD;AAAA,eACG;AAAA,qBACA,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE,CACTP,MAAM,CAACQ,UADE,EAET;AACIC,cAAAA,WAAW,EACXP,MAAM,CAAChC,KAAP,CAAawC,MAAb,GAAsB,CAAtB,IAA2BtD,SAAS,CAACuD,QAAV,CAAmBT,MAAM,CAAChC,KAA1B,CAA3B,GACE,MADF,GAEE;AAJN,aAFS,CAAb;AAAA,sBASI,KAAC,SAAD;AACI,cAAA,WAAW,EAAC,OADhB;AAEI,cAAA,cAAc,EAAC,MAFnB;AAGI,cAAA,YAAY,EAAC,eAHjB;AAII,cAAA,eAAe,EAAC,cAJpB;AAKI,cAAA,SAAS,EAAE,IALf;AAMI,cAAA,YAAY,EAAEkC,YAAY,CAAC,OAAD,CAN9B;AAOI,cAAA,MAAM,EAAED,UAAU,CAAC,OAAD,CAPtB;AAQI,cAAA,KAAK,EAAED,MAAM,CAAChC;AARlB;AATJ,YADA,EAsBA,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE,CACT8B,MAAM,CAACQ,UADE,EAET;AACIC,cAAAA,WAAW,EACXP,MAAM,CAAC7B,QAAP,CAAgBqC,MAAhB,KAA2B,CAA3B,IAAgCR,MAAM,CAAC7B,QAAP,CAAgBqC,MAAhB,GAAyB,CAAzD,IAA8DtD,SAAS,CAACuD,QAAV,CAAmBT,MAAM,CAAC7B,QAA1B,CAA9D,GACE,MADF,GAEE;AAJN,aAFS,CAAb;AAAA,sBASI,KAAC,SAAD;AACI,cAAA,WAAW,EAAC,UADhB;AAEI,cAAA,cAAc,EAAC,MAFnB;AAGI,cAAA,eAAe,EAAC,UAHpB;AAII,cAAA,YAAY,EAAE+B,YAAY,CAAC,UAAD,CAJ9B;AAKI,cAAA,MAAM,EAAED,UAAU,CAAC,UAAD,CALtB;AAMI,cAAA,KAAK,EAAED,MAAM,CAAC7B;AANlB;AATJ,YAtBA,EAyCA,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE,CAAC2B,MAAM,CAACQ,UAAR,EACL;AACIC,cAAAA,WAAW,EACXP,MAAM,CAAC3B,QAAP,CAAgBmC,MAAhB,GAAyB,CAAzB,IAA8BR,MAAM,CAAC3B,QAAP,CAAgBmC,MAAhB,IAA0B,CAAxD,GACE,MADF,GAEE;AAJN,aADK,CAAb;AAAA,sBAQI,KAAC,SAAD;AACI,cAAA,WAAW,EAAC,UADhB;AAEI,cAAA,cAAc,EAAC,MAFnB;AAGI,cAAA,WAAW,EAAE,KAHjB;AAII,cAAA,eAAe,EAAE,IAJrB;AAKI,cAAA,eAAe,EAAC,UALpB;AAMI,cAAA,YAAY,EAAEN,YAAY,CAAC,UAAD,CAN9B;AAOI,cAAA,MAAM,EAAED,UAAU,CAAC,UAAD,CAPtB;AAQI,cAAA,KAAK,EAAED,MAAM,CAAC3B;AARlB;AARJ,YAzCA,EA4DA,KAAC,SAAD;AACI,YAAA,KAAK,EAAEyB,MAAM,CAACY,MAAP,CAAcL,OAAd,CADX;AAEI,YAAA,OAAO,EAAEF,YAFb;AAGI,YAAA,QAAQ,EAAE,CAACE,OAHf;AAAA,sBAKI,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEP,MAAM,CAACa,UAApB;AAAA;AAAA;AALJ,YA5DA,EAoEA,MAAC,IAAD;AAAM,YAAA,KAAK,EAAEb,MAAM,CAACc,cAApB;AAAA,uBACI,KAAC,IAAD;AAAA;AAAA,cADJ,EAEI,KAAC,gBAAD;AAAkB,cAAA,OAAO,EAAE;AAAA,uBAAMhD,UAAU,CAACiD,IAAX,CAAgB,aAAhB,CAAN;AAAA,eAA3B;AAAA,wBACI,KAAC,IAAD;AAAM,gBAAA,KAAK,EAAEf,MAAM,CAACgB,SAApB;AAAA;AAAA;AADJ,cAFJ;AAAA,YApEA;AAAA,UADH;AAAA;AAND;AADJ,IADF;AAwFD;;AAED,IAAMhB,MAAM,GAAGiB,UAAU,CAACC,MAAX,CAAkB;AAC7BjB,EAAAA,SAAS,EAAE;AACPkB,IAAAA,SAAS,EAAE;AADJ,GADkB;AAI7BX,EAAAA,UAAU,EAAE;AACRY,IAAAA,YAAY,EAAE,CADN;AAERC,IAAAA,OAAO,EAAE,EAFD;AAGRC,IAAAA,eAAe,EAAE,SAHT;AAIRC,IAAAA,YAAY,EAAE,EAJN;AAKRC,IAAAA,WAAW,EAAE,CALL;AAMRf,IAAAA,WAAW,EAAE;AANL,GAJiB;AAY7BG,EAAAA,MAAM,EAAE,gBAAAL,OAAO;AAAA,WAAK;AAChBe,MAAAA,eAAe,EAAEf,OAAO,GAAG,SAAH,GAAe,SADvB;AAEhBkB,MAAAA,UAAU,EAAE,QAFI;AAGhBC,MAAAA,cAAc,EAAE,QAHA;AAIhBC,MAAAA,KAAK,EAAE,MAJS;AAKhBC,MAAAA,QAAQ,EAAE,EALM;AAMhBC,MAAAA,SAAS,EAAE,EANK;AAOhBT,MAAAA,YAAY,EAAE;AAPE,KAAL;AAAA,GAZc;AAqB7BP,EAAAA,UAAU,EAAE;AACRiB,IAAAA,UAAU,EAAE,KADJ;AAERH,IAAAA,KAAK,EAAC;AAFE,GArBiB;AAyB7Bb,EAAAA,cAAc,EAAE;AACZiB,IAAAA,aAAa,EAAE,KADH;AAEZC,IAAAA,KAAK,EAAE,MAFK;AAGZN,IAAAA,cAAc,EAAE,QAHJ;AAIZP,IAAAA,SAAS,EAAE;AAJC,GAzBa;AA+B7BH,EAAAA,SAAS,EAAE;AACPW,IAAAA,KAAK,EAAE;AADA;AA/BkB,CAAlB,CAAf;AAoCA,eAAe9D,UAAf","sourcesContent":["import React from 'react';\r\nimport { View, StyleSheet, TextInput, Text, Pressable, TouchableOpacity } from 'react-native';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport Validator from 'email-validator';\r\nimport { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\r\nimport { doc, setDoc } from \"firebase/firestore\"; \r\nimport { LogBox } from 'react-native';\r\n\r\nimport { firebaseApp, db } from '../../firebase';\r\n\r\nLogBox.ignoreLogs(['Setting a timer for a long period of time'])\r\n\r\nfunction signupForm({navigation}) {\r\n  const signupFormSchema = yup.object().shape({\r\n    email: yup.string().email().required('An email is required'),\r\n    username: yup.string().required().min(2,'A username is required and has to be at least 2 characters'),\r\n    password: yup.string().required().min(6,'Your password has to have at least 6 characters')\r\n  });\r\n\r\n  const getRandomProfilePicture = async () => {\r\n      const response = await fetch('https://randomuser.me/api/')\r\n      const data     = await response.json()\r\n\r\n      return data.results[0].picture.large\r\n  }\r\n\r\n  const saveUser = async (user) => {\r\n    try {\r\n        await setDoc(doc(db, \"users\",user.uid), {\r\n            owner_uid: user.uid,\r\n            username: user.username,\r\n            email: user.email,\r\n            profile_picture: await getRandomProfilePicture()\r\n          }).catch(error => {\r\n            console.log('Something went wrong',error.message)\r\n          });\r\n    } catch (error) {\r\n        console.log('Something went wrong',error.message)\r\n    }\r\n    \r\n}\r\n\r\n  const onSignup = async (email,username,password) => {\r\n    const auth = getAuth(firebaseApp);\r\n\r\n    createUserWithEmailAndPassword(auth, email, password)\r\n      .then( (userCredential) => {\r\n        // Signed in \r\n        const user = userCredential.user;\r\n\r\n        saveUser({uid: user.uid,email: user.email,username});\r\n        navigation.goBack();\r\n      })\r\n      .catch((error) => {\r\n        const errorMessage = error.message;\r\n\r\n        console.log('Something went wrong',errorMessage)\r\n      });\r\n  }; \r\n\r\n  return (\r\n    <View style={styles.container}>\r\n        <Formik\r\n            initialValues={{email: '',username: '',password: ''}}\r\n            onSubmit={(values) => onSignup(values.email,values.username,values.password)}\r\n            validationSchema={signupFormSchema}\r\n            validateOnMount={true}\r\n        >\r\n        {({handleBlur,handleChange,handleSubmit,values,errors,isValid}) => (\r\n            <>\r\n            <View style={[\r\n                styles.inputField,\r\n                {\r\n                    borderColor: \r\n                    values.email.length < 1 || Validator.validate(values.email) \r\n                    ? '#ddd' \r\n                    : 'red'\r\n                }\r\n            ]} >\r\n                <TextInput \r\n                    placeholder='Email'\r\n                    autoCapitalize='none'\r\n                    keyboardType='email-address'\r\n                    textContentType='emailAddress'\r\n                    autoFocus={true}\r\n                    onChangeText={handleChange('email')}\r\n                    onBlur={handleBlur('email')}\r\n                    value={values.email}\r\n                />\r\n            </View>\r\n\r\n            <View style={[\r\n                styles.inputField,\r\n                {\r\n                    borderColor: \r\n                    values.username.length === 0 || values.username.length > 2 || Validator.validate(values.username) \r\n                    ? '#ddd' \r\n                    : 'red'\r\n                }\r\n            ]} >\r\n                <TextInput \r\n                    placeholder='Username'\r\n                    autoCapitalize='none'\r\n                    textContentType='username'\r\n                    onChangeText={handleChange('username')}\r\n                    onBlur={handleBlur('username')}\r\n                    value={values.username}\r\n                />\r\n            </View>\r\n\r\n            <View style={[styles.inputField,\r\n                    {\r\n                        borderColor: \r\n                        values.password.length < 1 || values.password.length >= 6 \r\n                        ? '#ddd' \r\n                        : 'red'\r\n                    }\r\n            ]}>\r\n                <TextInput \r\n                    placeholder='Password'\r\n                    autoCapitalize='none'\r\n                    autoCorrect={false}\r\n                    secureTextEntry={true}\r\n                    textContentType='password'\r\n                    onChangeText={handleChange('password')}\r\n                    onBlur={handleBlur('password')}\r\n                    value={values.password}\r\n                />\r\n            </View>            \r\n            <Pressable \r\n                style={styles.button(isValid)} \r\n                onPress={handleSubmit} \r\n                disabled={!isValid}\r\n            >\r\n                <Text style={styles.buttonText}>Sign up</Text>\r\n            </Pressable>\r\n\r\n            <View style={styles.loginContainer}>\r\n                <Text>Already have an account? </Text>\r\n                <TouchableOpacity onPress={() => navigation.push('LoginScreen')}>\r\n                    <Text style={styles.loginText}>Login</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n            </>\r\n        )}\r\n        </Formik>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        marginTop: 50\r\n      },\r\n    inputField: {\r\n        borderRadius: 4,\r\n        padding: 10,\r\n        backgroundColor: '#FAFAFA',\r\n        marginBottom: 10,\r\n        borderWidth: 1,\r\n        borderColor: '#DDD'\r\n    },\r\n    button: isValid => ({\r\n        backgroundColor: isValid ? '#0096F6' : '#9aCAF7',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        color: '#FFF',\r\n        fontSize: 20,\r\n        minHeight: 42,\r\n        borderRadius: 4\r\n    }),\r\n    buttonText: {\r\n        fontWeight: '600',\r\n        color:'#FFF'\r\n    },\r\n    loginContainer: {\r\n        flexDirection: 'row',\r\n        width: '100%',\r\n        justifyContent: 'center',\r\n        marginTop: 50,\r\n    },\r\n    loginText: {\r\n        color: '#6BB0F5'\r\n    }\r\n});\r\n\r\nexport default signupForm;"]},"metadata":{},"sourceType":"module"}