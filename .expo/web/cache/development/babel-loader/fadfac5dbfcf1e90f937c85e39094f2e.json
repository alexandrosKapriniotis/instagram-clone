{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as FileSystem from 'expo-file-system';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar CachedImage = function CachedImage(props) {\n  var uri = props.source.uri,\n      cacheKey = props.cacheKey;\n  var filesystemURI = \"\" + FileSystem.cacheDirectory + cacheKey;\n\n  var _useState = useState(filesystemURI),\n      _useState2 = _slicedToArray(_useState, 2),\n      imgURI = _useState2[0],\n      setImgURI = _useState2[1];\n\n  var componentIsMounted = useRef(true);\n  useEffect(function () {\n    var loadImage = function loadImage(_ref) {\n      var fileURI, metadata;\n      return _regeneratorRuntime.async(function loadImage$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              fileURI = _ref.fileURI;\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(fileURI));\n\n            case 4:\n              metadata = _context.sent;\n\n              if (metadata.exists) {\n                _context.next = 11;\n                break;\n              }\n\n              if (!componentIsMounted.current) {\n                _context.next = 10;\n                break;\n              }\n\n              setImgURI(null);\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(FileSystem.downloadAsync(uri, fileURI));\n\n            case 10:\n              if (componentIsMounted.current) {\n                setImgURI(fileURI);\n              }\n\n            case 11:\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              setImgURI(uri);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 13]], Promise);\n    };\n\n    loadImage({\n      fileURI: filesystemURI\n    });\n    return function () {\n      componentIsMounted.current = false;\n    };\n  }, []);\n  return _jsx(Image, _objectSpread(_objectSpread({}, props), {}, {\n    source: {\n      uri: imgURI\n    }\n  }));\n};\n\nCachedImage.propTypes = {\n  source: PropTypes.object.isRequired,\n  cacheKey: PropTypes.string.isRequired\n};\nexport default CachedImage;","map":{"version":3,"sources":["C:/Users/sim2a/Documents/codes/instagram-clone/components/CachedImage.js"],"names":["FileSystem","PropTypes","React","useEffect","useRef","useState","CachedImage","props","uri","source","cacheKey","filesystemURI","cacheDirectory","imgURI","setImgURI","componentIsMounted","loadImage","fileURI","getInfoAsync","metadata","exists","current","downloadAsync","propTypes","object","isRequired","string"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,UAAZ,MAA4B,kBAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;;;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAC3B,MAAkBC,GAAlB,GAAsCD,KAAtC,CAAQE,MAAR,CAAkBD,GAAlB;AAAA,MAAyBE,QAAzB,GAAsCH,KAAtC,CAAyBG,QAAzB;AACA,MAAMC,aAAa,QAAMX,UAAU,CAACY,cAAjB,GAAkCF,QAArD;;AAEA,kBAA4BL,QAAQ,CAACM,aAAD,CAApC;AAAA;AAAA,MAAOE,MAAP;AAAA,MAAeC,SAAf;;AAEA,MAAMC,kBAAkB,GAAGX,MAAM,CAAC,IAAD,CAAjC;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMa,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,OAAT,QAASA,OAAT;AAAA;AAAA;AAAA,+CAGSjB,UAAU,CAACkB,YAAX,CAAwBD,OAAxB,CAHT;;AAAA;AAGRE,cAAAA,QAHQ;;AAAA,kBAITA,QAAQ,CAACC,MAJA;AAAA;AAAA;AAAA;;AAAA,mBAMRL,kBAAkB,CAACM,OANX;AAAA;AAAA;AAAA;;AAOVP,cAAAA,SAAS,CAAC,IAAD,CAAT;AAPU;AAAA,+CAQJd,UAAU,CAACsB,aAAX,CACJd,GADI,EAEJS,OAFI,CARI;;AAAA;AAaZ,kBAAIF,kBAAkB,CAACM,OAAvB,EAAgC;AAC9BP,gBAAAA,SAAS,CAACG,OAAD,CAAT;AACD;;AAfW;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBdH,cAAAA,SAAS,CAACN,GAAD,CAAT;;AAlBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAsBAQ,IAAAA,SAAS,CAAC;AAAEC,MAAAA,OAAO,EAAEN;AAAX,KAAD,CAAT;AAEA,WAAO,YAAM;AACXI,MAAAA,kBAAkB,CAACM,OAAnB,GAA6B,KAA7B;AACD,KAFD;AAGD,GA5BQ,EA4BN,EA5BM,CAAT;AA8BA,SACE,KAAC,KAAD,kCAEMd,KAFN;AAGE,IAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEK;AADC;AAHV,KADF;AASD,CA/CD;;AAiDAP,WAAW,CAACiB,SAAZ,GAAwB;AACtBd,EAAAA,MAAM,EAAER,SAAS,CAACuB,MAAV,CAAiBC,UADH;AAEtBf,EAAAA,QAAQ,EAAET,SAAS,CAACyB,MAAV,CAAiBD;AAFL,CAAxB;AAKA,eAAenB,WAAf","sourcesContent":["import * as FileSystem from 'expo-file-system'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { Image } from 'react-native'\r\n\r\nconst CachedImage = props => {\r\n  const { source: { uri }, cacheKey } = props\r\n  const filesystemURI = `${FileSystem.cacheDirectory}${cacheKey}`\r\n\r\n  const [imgURI, setImgURI] = useState(filesystemURI)\r\n\r\n  const componentIsMounted = useRef(true)\r\n\r\n  useEffect(() => {\r\n    const loadImage = async ({ fileURI }) => {\r\n      try {\r\n        // Use the cached image if it exists\r\n        const metadata = await FileSystem.getInfoAsync(fileURI)\r\n        if (!metadata.exists) {\r\n          // download to cache\r\n          if (componentIsMounted.current) {\r\n            setImgURI(null)\r\n            await FileSystem.downloadAsync(\r\n              uri,\r\n              fileURI\r\n            )\r\n          }\r\n          if (componentIsMounted.current) {\r\n            setImgURI(fileURI)\r\n          }\r\n        }\r\n      } catch (err) {\r\n        setImgURI(uri)\r\n      }\r\n    }\r\n\r\n    loadImage({ fileURI: filesystemURI })\r\n\r\n    return () => {\r\n      componentIsMounted.current = false\r\n    }\r\n  }, [])// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <Image\r\n      // eslint-disable-next-line react/jsx-props-no-spreading\r\n      {...props}\r\n      source={{\r\n        uri: imgURI,\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nCachedImage.propTypes = {\r\n  source: PropTypes.object.isRequired,\r\n  cacheKey: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default CachedImage"]},"metadata":{},"sourceType":"module"}