{"ast":null,"code":"import React, { useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Validator from 'email-validator';\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport { auth } from \"../../firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction LoginForm(_ref) {\n  var navigation = _ref.navigation;\n  var LoginFormSchema = yup.object().shape({\n    email: yup.string().email().required('An email is required'),\n    password: yup.string().required().min(6, 'Your password has to have at least 6 characters')\n  });\n\n  var onLogin = function onLogin(email, password) {\n    signInWithEmailAndPassword(auth, email, password).then(function (userCredential) {\n      var user = userCredential.user;\n    }).catch(function (error) {\n      Alert.alert('Login Error', error.message, [{\n        text: 'OK',\n        onPress: function onPress() {\n          return console.log('OK');\n        },\n        style: 'cancel'\n      }, {\n        text: 'Sign Up',\n        onPress: function onPress() {\n          return navigation.push('SignupScreen');\n        }\n      }]);\n    });\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Formik, {\n      initialValues: {\n        email: '',\n        password: ''\n      },\n      onSubmit: function onSubmit(values) {\n        return onLogin(values.email, values.password);\n      },\n      validationSchema: LoginFormSchema,\n      validateOnMount: true,\n      children: function children(_ref2) {\n        var handleBlur = _ref2.handleBlur,\n            handleChange = _ref2.handleChange,\n            handleSubmit = _ref2.handleSubmit,\n            values = _ref2.values,\n            errors = _ref2.errors,\n            isValid = _ref2.isValid;\n        return _jsxs(_Fragment, {\n          children: [_jsx(View, {\n            style: [styles.inputField, {\n              borderColor: values.email.length < 1 || Validator.validate(values.email) ? '#ddd' : 'red'\n            }],\n            children: _jsx(TextInput, {\n              placeholder: \"Phone number, username or email\",\n              autoCapitalize: \"none\",\n              keyboardType: \"email-address\",\n              textContentType: \"emailAddress\",\n              autoFocus: true,\n              onChangeText: handleChange('email'),\n              onBlur: handleBlur('email'),\n              value: values.email\n            })\n          }), _jsx(View, {\n            style: [styles.inputField, {\n              borderColor: values.password.length < 1 || values.password.length >= 6 ? '#ddd' : 'red'\n            }],\n            children: _jsx(TextInput, {\n              placeholder: \"Password\",\n              autoCapitalize: \"none\",\n              autoCorrect: false,\n              secureTextEntry: true,\n              textContentType: \"password\",\n              onChangeText: handleChange('password'),\n              onBlur: handleBlur('password'),\n              value: values.password\n            })\n          }), _jsx(View, {\n            style: {\n              alignItems: 'flex-end',\n              marginBottom: 30\n            },\n            children: _jsx(Text, {\n              style: {\n                color: '#6BB0F5'\n              },\n              children: \"Forgot password?\"\n            })\n          }), _jsx(Pressable, {\n            style: styles.button(isValid),\n            onPress: handleSubmit,\n            disabled: !isValid,\n            children: _jsx(Text, {\n              style: styles.buttonText,\n              children: \"Log In\"\n            })\n          }), _jsxs(View, {\n            style: styles.signupContainer,\n            children: [_jsx(Text, {\n              children: \"Don't have an account? \"\n            }), _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                return navigation.push('SignupScreen');\n              },\n              children: _jsx(Text, {\n                style: styles.signupText,\n                children: \"Sign Up\"\n              })\n            })]\n          })]\n        });\n      }\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 50\n  },\n  inputField: {\n    borderRadius: 4,\n    padding: 10,\n    backgroundColor: '#FAFAFA',\n    marginBottom: 10,\n    borderWidth: 1,\n    borderColor: '#DDD'\n  },\n  button: function button(isValid) {\n    return {\n      backgroundColor: isValid ? '#0096F6' : '#9aCAF7',\n      alignItems: 'center',\n      justifyContent: 'center',\n      color: '#FFF',\n      fontSize: 20,\n      minHeight: 42,\n      borderRadius: 4\n    };\n  },\n  buttonText: {\n    fontWeight: '600',\n    color: '#FFF'\n  },\n  signupContainer: {\n    flexDirection: 'row',\n    width: '100%',\n    justifyContent: 'center',\n    marginTop: 50\n  },\n  signupText: {\n    color: '#6BB0F5'\n  }\n});\nexport default LoginForm;","map":{"version":3,"sources":["C:/Users/sim2a/Documents/codes/instagram-clone/components/loginScreen/LoginForm.js"],"names":["React","useCallback","Formik","yup","Validator","signInWithEmailAndPassword","auth","LoginForm","navigation","LoginFormSchema","object","shape","email","string","required","password","min","onLogin","then","userCredential","user","catch","error","Alert","alert","message","text","onPress","console","log","style","push","styles","container","values","handleBlur","handleChange","handleSubmit","errors","isValid","inputField","borderColor","length","validate","alignItems","marginBottom","color","button","buttonText","signupContainer","signupText","StyleSheet","create","marginTop","borderRadius","padding","backgroundColor","borderWidth","justifyContent","fontSize","minHeight","fontWeight","flexDirection","width"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\r\nimport { View, StyleSheet, TextInput, Text, Pressable, TouchableOpacity,Alert } from 'react-native';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport Validator from 'email-validator';\r\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\r\n\r\nimport { auth } from '../../firebase';\r\n\r\nfunction LoginForm({navigation}) {\r\n  const LoginFormSchema = yup.object().shape({\r\n    email: yup.string().email().required('An email is required'),\r\n    password: yup.string().required().min(6,'Your password has to have at least 6 characters')\r\n  });\r\n\r\n\r\n  const onLogin = (email,password) => {        \r\n    signInWithEmailAndPassword(auth, email, password)\r\n        .then((userCredential) => {\r\n            const user = userCredential.user; \r\n        })\r\n        .catch((error) => {\r\n            Alert.alert(\r\n                'Login Error',\r\n                error.message,\r\n                [\r\n                    {\r\n                        text: 'OK',\r\n                        onPress: () => console.log('OK'),\r\n                        style: 'cancel'\r\n                    },\r\n                    {\r\n                        text: 'Sign Up',\r\n                        onPress: () => navigation.push('SignupScreen')\r\n                    }\r\n                ]\r\n            )\r\n        });\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n        <Formik\r\n            initialValues={{email: '',password: ''}}\r\n            onSubmit={(values) => onLogin(values.email,values.password)}\r\n            validationSchema={LoginFormSchema}\r\n            validateOnMount={true}\r\n        >\r\n        {({handleBlur,handleChange,handleSubmit,values,errors,isValid}) => (\r\n            <>\r\n            <View style={[\r\n                styles.inputField,\r\n                {\r\n                    borderColor: \r\n                    values.email.length < 1 || Validator.validate(values.email) \r\n                    ? '#ddd' \r\n                    : 'red'\r\n                }\r\n            ]} >\r\n                <TextInput \r\n                    placeholder='Phone number, username or email'\r\n                    autoCapitalize='none'\r\n                    keyboardType='email-address'\r\n                    textContentType='emailAddress'\r\n                    autoFocus={true}\r\n                    onChangeText={handleChange('email')}\r\n                    onBlur={handleBlur('email')}\r\n                    value={values.email}\r\n                />\r\n            </View>\r\n\r\n            <View style={[styles.inputField,\r\n                    {\r\n                        borderColor: \r\n                        values.password.length < 1 || values.password.length >= 6 \r\n                        ? '#ddd' \r\n                        : 'red'\r\n                    }\r\n            ]}>\r\n                <TextInput \r\n                    placeholder='Password'\r\n                    autoCapitalize='none'\r\n                    autoCorrect={false}\r\n                    secureTextEntry={true}\r\n                    textContentType='password'\r\n                    onChangeText={handleChange('password')}\r\n                    onBlur={handleBlur('password')}\r\n                    value={values.password}\r\n                />\r\n            </View>\r\n            <View style={{alignItems: 'flex-end',marginBottom: 30}}>\r\n                <Text style={{color: '#6BB0F5'}}>Forgot password?</Text>\r\n            </View>\r\n            <Pressable \r\n                style={styles.button(isValid)} \r\n                onPress={handleSubmit} \r\n                disabled={!isValid}\r\n            >\r\n                <Text style={styles.buttonText}>Log In</Text>\r\n            </Pressable>\r\n\r\n            <View style={styles.signupContainer}>\r\n                <Text>Don't have an account? </Text>\r\n                <TouchableOpacity onPress={() => navigation.push('SignupScreen')} >\r\n                    <Text style={styles.signupText}>Sign Up</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n            </>\r\n        )}\r\n        </Formik>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginTop: 50\r\n  },\r\n  inputField: {\r\n    borderRadius: 4,\r\n    padding: 10,\r\n    backgroundColor: '#FAFAFA',\r\n    marginBottom: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#DDD'\r\n  },\r\n  button: isValid => ({\r\n    backgroundColor: isValid ? '#0096F6' : '#9aCAF7',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    color: '#FFF',\r\n    fontSize: 20,\r\n    minHeight: 42,\r\n    borderRadius: 4\r\n  }),\r\n  buttonText: {\r\n    fontWeight: '600',\r\n    color:'#FFF'\r\n  },\r\n  signupContainer: {\r\n    flexDirection: 'row',\r\n    width: '100%',\r\n    justifyContent: 'center',\r\n    marginTop: 50,\r\n  },\r\n  signupText: {\r\n      color: '#6BB0F5'\r\n  }\r\n});\r\n\r\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}