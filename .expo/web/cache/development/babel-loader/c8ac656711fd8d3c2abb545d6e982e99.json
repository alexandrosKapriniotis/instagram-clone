{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { useState } from 'react';\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\nimport { Divider } from 'react-native-elements/dist/divider/Divider';\nimport validUrl from 'valid-url';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar PLACEHOLDER_IMAGE = '../../assets/empty-image.png';\nvar uploadPostSchema = yup.object().shape({\n  imageUrl: yup.string().url().required('A URL is required'),\n  caption: yup.string().max(2200, 'Caption has reached the character limit.')\n});\nexport default function FormikPostUploader(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      thumbnailUrl = _useState2[0],\n      setThumbnailUrl = _useState2[1];\n\n  return _jsx(Formik, {\n    initialValues: {\n      caption: '',\n      imageUrl: ''\n    },\n    onSubmit: function onSubmit(values) {\n      console.log('your post was submitted successfully');\n      navigation.goBack();\n    },\n    validationSchema: uploadPostSchema,\n    validateOnMount: true,\n    children: function children(_ref2) {\n      var handleBlur = _ref2.handleBlur,\n          handleChange = _ref2.handleChange,\n          handleSubmit = _ref2.handleSubmit,\n          values = _ref2.values,\n          errors = _ref2.errors,\n          isValid = _ref2.isValid;\n      return _jsxs(_Fragment, {\n        children: [_jsxs(View, {\n          style: styles.container,\n          children: [_jsx(Image, {\n            source: thumbnailUrl ? {\n              uri: thumbnailUrl\n            } : require(PLACEHOLDER_IMAGE),\n            style: styles.image\n          }), _jsxs(View, {\n            style: {\n              flex: 1,\n              marginLeft: 12\n            },\n            children: [_jsx(TextInput, {\n              style: {\n                color: 'white',\n                fontSize: 18\n              },\n              placeholder: \"Write a caption\",\n              placeholderTextColor: \"gray\",\n              multiline: true,\n              onChangeText: handleChange('caption'),\n              onBlur: handleBlur('caption'),\n              value: values.caption\n            }), errors.caption && _jsx(Text, {\n              style: {\n                fontSize: 10,\n                color: 'red'\n              },\n              children: errors.caption\n            })]\n          })]\n        }), _jsx(Divider, {\n          width: 0.2,\n          orientation: \"vertical\"\n        }), _jsx(TextInput, {\n          onChange: function onChange(e) {\n            return setThumbnailUrl(e.nativeEvent.text);\n          },\n          style: {\n            color: 'white',\n            fontSize: 16\n          },\n          placeholder: \"Enter Image Url\",\n          placeholderTextColor: \"gray\",\n          onChangeText: handleChange('imageUrl'),\n          onBlur: handleBlur('imageUrl'),\n          value: values.imageUrl\n        }), errors.imageUrl && _jsx(Text, {\n          style: {\n            fontSize: 10,\n            color: 'red'\n          },\n          children: errors.imageUrl\n        }), _jsx(Button, {\n          onPress: handleSubmit,\n          title: \"Share\",\n          disabled: !isValid,\n          color: \"#2196F3\"\n        })]\n      });\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    margin: 20,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n  image: {\n    width: 100,\n    height: 100\n  },\n  button: {\n    backgroundColor: '#000',\n    color: 'blue'\n  }\n});","map":{"version":3,"sources":["C:/Users/sim2a/Documents/codes/instagram-clone/components/newPost/FormikPostUploader.js"],"names":["React","useState","yup","Formik","Divider","validUrl","PLACEHOLDER_IMAGE","uploadPostSchema","object","shape","imageUrl","string","url","required","caption","max","FormikPostUploader","navigation","thumbnailUrl","setThumbnailUrl","values","console","log","goBack","handleBlur","handleChange","handleSubmit","errors","isValid","styles","container","uri","require","image","flex","marginLeft","color","fontSize","e","nativeEvent","text","StyleSheet","create","margin","justifyContent","alignItems","flexDirection","width","height","button","backgroundColor"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, TextInput, View,Image,Button } from 'react-native'\r\nimport React, { useState } from 'react'\r\nimport * as yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport { Divider } from 'react-native-elements/dist/divider/Divider';\r\nimport validUrl from 'valid-url';\r\n\r\nconst PLACEHOLDER_IMAGE = '../../assets/empty-image.png';\r\n\r\nconst uploadPostSchema = yup.object().shape({\r\n    imageUrl: yup.string().url().required('A URL is required'),\r\n    caption: yup.string().max(2200,'Caption has reached the character limit.')\r\n});\r\n\r\nexport default function FormikPostUploader({ navigation }) {\r\n  const [thumbnailUrl,setThumbnailUrl] = useState(null)\r\n\r\n  return (\r\n    <Formik \r\n        initialValues={{caption: '',imageUrl: ''}}\r\n        onSubmit={(values) => {\r\n            console.log('your post was submitted successfully')\r\n            navigation.goBack()\r\n        }}\r\n        validationSchema={uploadPostSchema}\r\n        validateOnMount={true}\r\n    >\r\n        {({handleBlur,handleChange,handleSubmit,values,errors,isValid}) => (\r\n            <>\r\n            <View style={styles.container}>\r\n                <Image source={thumbnailUrl ? {uri: thumbnailUrl} : require(PLACEHOLDER_IMAGE)} style={styles.image} />\r\n\r\n                <View style={{flex: 1,marginLeft: 12}}>\r\n                    <TextInput \r\n                        style={{color:'white',fontSize: 18}}\r\n                        placeholder='Write a caption' \r\n                        placeholderTextColor='gray'\r\n                        multiline={true}\r\n                        onChangeText={handleChange('caption')}\r\n                        onBlur={handleBlur('caption')}\r\n                        value={values.caption}                    \r\n                    />\r\n                    {\r\n                        errors.caption && (\r\n                            <Text style={{fontSize: 10,color: 'red'}}>\r\n                                {errors.caption}\r\n                            </Text>\r\n                        )\r\n                    }\r\n                </View>                \r\n            </View>\r\n            <Divider width={0.2} orientation='vertical' />\r\n            <TextInput \r\n                    onChange={e => setThumbnailUrl(e.nativeEvent.text)}\r\n                    style={{color:'white',fontSize: 16}}\r\n                    placeholder='Enter Image Url' \r\n                    placeholderTextColor='gray'\r\n                    onChangeText={handleChange('imageUrl')}\r\n                    onBlur={handleBlur('imageUrl')}\r\n                    value={values.imageUrl}    \r\n                />\r\n                {\r\n                    errors.imageUrl && (\r\n                        <Text style={{fontSize: 10,color: 'red'}}>\r\n                            {errors.imageUrl}\r\n                        </Text>\r\n                    )\r\n                }\r\n\r\n                <Button onPress={handleSubmit} title='Share' disabled={!isValid} color='#2196F3' />\r\n            </>\r\n        )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        margin: 20,\r\n        justifyContent:'space-between',\r\n        alignItems: 'center',\r\n        flexDirection: 'row'\r\n    },\r\n    image: {\r\n        width: 100,\r\n        height: 100\r\n    },\r\n    button: {\r\n        backgroundColor: '#000',\r\n        color: 'blue'\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}