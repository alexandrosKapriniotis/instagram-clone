{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { useState, useEffect } from 'react';\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\nimport { Divider } from 'react-native-elements/dist/divider/Divider';\nimport validUrl from 'valid-url';\nimport { db, firebaseApp, auth } from \"../../firebase\";\nimport { doc, serverTimestamp, onSnapshot, setDoc, collection } from \"firebase/firestore\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar PLACEHOLDER_IMAGE = '../../assets/empty-image.png';\nvar uploadPostSchema = yup.object().shape({\n  imageUrl: yup.string().url().required('A URL is required'),\n  caption: yup.string().max(2200, 'Caption has reached the character limit.')\n});\nexport default function FormikPostUploader(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      thumbnailUrl = _useState2[0],\n      setThumbnailUrl = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentLoggedInUser = _useState4[0],\n      setCurrentLoggedInUser = _useState4[1];\n\n  var getUsername = function getUsername() {\n    var user = auth.currentUser;\n    var docRef = doc(db, \"users\", user.email);\n    var unsubscribe = onSnapshot(docRef, function (doc) {\n      setCurrentLoggedInUser({\n        username: doc.data().username,\n        profilePicture: doc.data().profile_picture,\n        email: user.email\n      });\n    });\n    return unsubscribe;\n  };\n\n  useEffect(function () {\n    getUsername();\n  }, []);\n\n  var uploadPost = function uploadPost(imageUrl, caption) {\n    var subColRef;\n    return _regeneratorRuntime.async(function uploadPost$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            subColRef = collection(db, \"users\", currentLoggedInUser.email, \"posts\");\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(setDoc(doc(subColRef), {\n              imageUrl: imageUrl,\n              user: currentLoggedInUser.username,\n              profile_picture: currentLoggedInUser.profilePicture && '',\n              owner_id: auth.currentUser.uid,\n              caption: caption,\n              createdAt: serverTimestamp(),\n              likes: 0,\n              likes_by_users: [],\n              comments: []\n            }));\n\n          case 4:\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('Error: ', _context.t0.message);\n\n          case 9:\n            return _context.abrupt(\"return\", navigation.goBack());\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  return _jsx(Formik, {\n    initialValues: {\n      caption: '',\n      imageUrl: ''\n    },\n    onSubmit: function onSubmit(values) {\n      uploadPost(values.imageUrl, values.caption);\n    },\n    validationSchema: uploadPostSchema,\n    validateOnMount: true,\n    children: function children(_ref2) {\n      var handleBlur = _ref2.handleBlur,\n          handleChange = _ref2.handleChange,\n          handleSubmit = _ref2.handleSubmit,\n          values = _ref2.values,\n          errors = _ref2.errors,\n          isValid = _ref2.isValid;\n      return _jsxs(_Fragment, {\n        children: [_jsxs(View, {\n          style: styles.container,\n          children: [_jsx(Image, {\n            source: validUrl.isUri(thumbnailUrl) ? {\n              uri: thumbnailUrl\n            } : require(PLACEHOLDER_IMAGE),\n            style: styles.image\n          }), _jsxs(View, {\n            style: {\n              flex: 1,\n              marginLeft: 12\n            },\n            children: [_jsx(TextInput, {\n              style: {\n                color: 'white',\n                fontSize: 18\n              },\n              placeholder: \"Write a caption\",\n              placeholderTextColor: \"gray\",\n              multiline: true,\n              onChangeText: handleChange('caption'),\n              onBlur: handleBlur('caption'),\n              value: values.caption\n            }), errors.caption && _jsx(Text, {\n              style: {\n                fontSize: 10,\n                color: 'red'\n              },\n              children: errors.caption\n            })]\n          })]\n        }), _jsx(Divider, {\n          width: 0.2,\n          orientation: \"vertical\"\n        }), _jsx(TextInput, {\n          onChange: function onChange(e) {\n            return setThumbnailUrl(e.nativeEvent.text);\n          },\n          style: {\n            color: 'white',\n            fontSize: 16\n          },\n          placeholder: \"Enter Image Url\",\n          placeholderTextColor: \"gray\",\n          onChangeText: handleChange('imageUrl'),\n          onBlur: handleBlur('imageUrl'),\n          value: values.imageUrl\n        }), errors.imageUrl && _jsx(Text, {\n          style: {\n            fontSize: 10,\n            color: 'red'\n          },\n          children: errors.imageUrl\n        }), _jsx(Button, {\n          onPress: handleSubmit,\n          title: \"Share\",\n          disabled: !isValid,\n          color: \"#2196F3\"\n        })]\n      });\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    margin: 20,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n  image: {\n    width: 100,\n    height: 100\n  },\n  button: {\n    backgroundColor: '#000',\n    color: 'blue'\n  }\n});","map":{"version":3,"sources":["C:/Users/sim2a/Documents/codes/instagram-clone/components/newPost/FormikPostUploader.js"],"names":["React","useState","useEffect","yup","Formik","Divider","validUrl","db","firebaseApp","auth","doc","serverTimestamp","onSnapshot","setDoc","collection","PLACEHOLDER_IMAGE","uploadPostSchema","object","shape","imageUrl","string","url","required","caption","max","FormikPostUploader","navigation","thumbnailUrl","setThumbnailUrl","currentLoggedInUser","setCurrentLoggedInUser","getUsername","user","currentUser","docRef","email","unsubscribe","username","data","profilePicture","profile_picture","uploadPost","subColRef","owner_id","uid","createdAt","likes","likes_by_users","comments","console","log","message","goBack","values","handleBlur","handleChange","handleSubmit","errors","isValid","styles","container","isUri","uri","require","image","flex","marginLeft","color","fontSize","e","nativeEvent","text","StyleSheet","create","margin","justifyContent","alignItems","flexDirection","width","height","button","backgroundColor"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, TextInput, View,Image,Button } from 'react-native'\r\nimport React, { useState, useEffect } from 'react'\r\nimport * as yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport { Divider } from 'react-native-elements/dist/divider/Divider';\r\nimport validUrl from 'valid-url';\r\nimport { db, firebaseApp, auth } from '../../firebase'\r\nimport { doc, serverTimestamp, onSnapshot,setDoc, collection } from \"firebase/firestore\";\r\n\r\nconst PLACEHOLDER_IMAGE = '../../assets/empty-image.png';\r\n\r\nconst uploadPostSchema = yup.object().shape({\r\n    imageUrl: yup.string().url().required('A URL is required'),\r\n    caption: yup.string().max(2200,'Caption has reached the character limit.')\r\n});\r\n\r\nexport default function FormikPostUploader({ navigation }) {\r\n  const [thumbnailUrl,setThumbnailUrl] = useState(null)\r\n  const [currentLoggedInUser,setCurrentLoggedInUser] = useState(null)\r\n\r\n  const getUsername = () => {\r\n    const user = auth.currentUser;\r\n\r\n    const docRef = doc(db, \"users\", user.email);\r\n    \r\n    const unsubscribe = onSnapshot(docRef,doc => {   \r\n        setCurrentLoggedInUser({\r\n            username: doc.data().username,\r\n            profilePicture: doc.data().profile_picture,\r\n            email: user.email\r\n        })   \r\n    })\r\n    return unsubscribe;\r\n  }\r\n  \r\n  useEffect( () => {\r\n    getUsername()\r\n  },[])\r\n\r\n  const uploadPost = async (imageUrl,caption) => {\r\n      try {\r\n        const subColRef = collection(db, \"users\", currentLoggedInUser.email, \"posts\");\r\n\r\n        await setDoc(doc(subColRef), {\r\n            imageUrl: imageUrl,\r\n            user: currentLoggedInUser.username,\r\n            profile_picture: currentLoggedInUser.profilePicture && '',\r\n            owner_id: auth.currentUser.uid,\r\n            caption: caption,\r\n            createdAt: serverTimestamp(),\r\n            likes: 0,\r\n            likes_by_users: [],\r\n            comments: []\r\n        });\r\n      } catch (error) {\r\n          console.log('Error: ',error.message)\r\n      }\r\n      return navigation.goBack();\r\n  }\r\n\r\n  return (\r\n    <Formik \r\n        initialValues={{caption: '',imageUrl: ''}}\r\n        onSubmit={(values) => {\r\n            uploadPost(values.imageUrl,values.caption)\r\n        }}\r\n        validationSchema={uploadPostSchema}\r\n        validateOnMount={true}\r\n    >\r\n        {({handleBlur,handleChange,handleSubmit,values,errors,isValid}) => (\r\n            <>\r\n            <View style={styles.container}>\r\n                <Image source={validUrl.isUri(thumbnailUrl) ? {uri: thumbnailUrl} : require(PLACEHOLDER_IMAGE)} style={styles.image} />\r\n\r\n                <View style={{flex: 1,marginLeft: 12}}>\r\n                    <TextInput \r\n                        style={{color:'white',fontSize: 18}}\r\n                        placeholder='Write a caption' \r\n                        placeholderTextColor='gray'\r\n                        multiline={true}\r\n                        onChangeText={handleChange('caption')}\r\n                        onBlur={handleBlur('caption')}\r\n                        value={values.caption}                    \r\n                    />\r\n                    {\r\n                        errors.caption && (\r\n                            <Text style={{fontSize: 10,color: 'red'}}>\r\n                                {errors.caption}\r\n                            </Text>\r\n                        )\r\n                    }\r\n                </View>                \r\n            </View>\r\n            <Divider width={0.2} orientation='vertical' />\r\n            <TextInput \r\n                    onChange={e => setThumbnailUrl(e.nativeEvent.text)}\r\n                    style={{color:'white',fontSize: 16}}\r\n                    placeholder='Enter Image Url' \r\n                    placeholderTextColor='gray'\r\n                    onChangeText={handleChange('imageUrl')}\r\n                    onBlur={handleBlur('imageUrl')}\r\n                    value={values.imageUrl}    \r\n                />\r\n                {\r\n                    errors.imageUrl && (\r\n                        <Text style={{fontSize: 10,color: 'red'}}>\r\n                            {errors.imageUrl}\r\n                        </Text>\r\n                    )\r\n                }\r\n\r\n                <Button onPress={handleSubmit} title='Share' disabled={!isValid} color='#2196F3' />\r\n            </>\r\n        )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        margin: 20,\r\n        justifyContent:'space-between',\r\n        alignItems: 'center',\r\n        flexDirection: 'row'\r\n    },\r\n    image: {\r\n        width: 100,\r\n        height: 100\r\n    },\r\n    button: {\r\n        backgroundColor: '#000',\r\n        color: 'blue'\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}