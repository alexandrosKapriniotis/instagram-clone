{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport BottomSheet from 'reanimated-bottom-sheet';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { Divider, Snackbar } from 'react-native-paper';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { deletePost, fetchFeedPosts, reload, sendNotification } from \"../redux/actions/index\";\nimport Post from \"../components/home/Post\";\nimport Header from \"../components/home/Header\";\nimport Stories from \"../components/home/Stories\";\nimport { container, utils } from \"../components/styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction HomeScreen(props) {\n  var navigation = props.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      posts = _useState2[0],\n      setPosts = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      refreshing = _useState4[0],\n      setRefreshing = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      unmutted = _useState6[0],\n      setUnmutted = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      inViewPort = _useState8[0],\n      setInViewPort = _useState8[1];\n\n  var _useState9 = useState(useRef(null)),\n      _useState10 = _slicedToArray(_useState9, 2),\n      sheetRef = _useState10[0],\n      setSheetRef = _useState10[1];\n\n  var _useState11 = useState({\n    visible: false,\n    item: null\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      modalShow = _useState12[0],\n      setModalShow = _useState12[1];\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      isValid = _useState14[0],\n      setIsValid = _useState14[1];\n\n  useEffect(function () {\n    if (props.usersFollowingLoaded == props.following.length && props.following.length !== 0) {\n      props.feed.sort(function (x, y) {\n        return y.creation.toDate() - x.creation.toDate();\n      });\n      setPosts(props.feed);\n      setRefreshing(false);\n\n      for (var i = 0; i < props.feed.length; i++) {\n        if (props.feed[i].type == 0) {\n          setUnmutted(i);\n          return;\n        }\n      }\n    }\n\n    navigation.setParams({\n      param: \"value\"\n    });\n  }, [props.usersFollowingLoaded, props.feed]);\n  var onViewableItemsChanged = useRef(function (_ref) {\n    var viewableItems = _ref.viewableItems,\n        changed = _ref.changed;\n\n    if (changed && changed.length > 0) {\n      setInViewPort(changed[0].index);\n    }\n  });\n\n  if (posts.length == 0) {\n    return _jsx(View, {});\n  }\n\n  if (sheetRef.current !== null) {\n    if (modalShow.visible) {\n      sheetRef.snapTo(0);\n    } else {\n      sheetRef.snapTo(1);\n    }\n  }\n\n  return _jsxs(View, {\n    style: [container.container, utils.backgroundWhite],\n    children: [_jsx(FlatList, {\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: function onRefresh() {\n          setRefreshing(true);\n          props.reload();\n        }\n      }),\n      onViewableItemsChanged: onViewableItemsChanged.current,\n      viewabilityConfig: {\n        waitForInteraction: false,\n        viewAreaCoveragePercentThreshold: 70\n      },\n      numColumns: 1,\n      horizontal: false,\n      data: posts,\n      keyExtractor: function keyExtractor(item, index) {\n        return index.toString();\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item,\n            index = _ref2.index;\n        return _jsx(View, {\n          children: _jsx(Post, {\n            route: {\n              params: {\n                user: item.user,\n                item: item,\n                index: index,\n                unmutted: unmutted,\n                inViewPort: inViewPort,\n                setUnmuttedMain: setUnmutted,\n                setModalShow: setModalShow,\n                feed: true\n              }\n            },\n            navigation: props.navigation\n          })\n        }, index);\n      }\n    }), _jsx(BottomSheet, {\n      bottomSheerColor: \"#FFFFFF\",\n      ref: setSheetRef,\n      initialPosition: 0,\n      snapPoints: [300, 0],\n      isBackDrop: true,\n      isBackDropDismissByPress: true,\n      isRoundBorderWithTipHeader: true,\n      backDropColor: \"black\",\n      isModal: true,\n      containerStyle: {\n        backgroundColor: \"white\"\n      },\n      tipStyle: {\n        backgroundColor: \"white\"\n      },\n      headerStyle: {\n        backgroundColor: \"white\",\n        flex: 1\n      },\n      bodyStyle: {\n        backgroundColor: \"white\",\n        flex: 1,\n        borderRadius: 20\n      },\n      body: _jsx(_Fragment, {\n        children: modalShow.item != null ? _jsxs(View, {\n          children: [_jsx(TouchableOpacity, {\n            style: {\n              padding: 20\n            },\n            onPress: function onPress() {\n              props.navigation.navigate(\"ProfileScreen\", {\n                uid: modalShow.item.user.uid,\n                username: undefined\n              });\n              setModalShow({\n                visible: false,\n                item: null\n              });\n            },\n            children: _jsx(Text, {\n              children: \"Profile\"\n            })\n          }), _jsx(Divider, {}), modalShow.item.creator == auth.currentUser.uid ? _jsx(TouchableOpacity, {\n            style: {\n              padding: 20\n            },\n            onPress: function onPress() {\n              props.deletePost(modalShow.item).then(function () {\n                setRefreshing(true);\n                props.reload();\n              });\n              setModalShow({\n                visible: false,\n                item: null\n              });\n            },\n            children: _jsx(Text, {\n              children: \"Delete\"\n            })\n          }) : null, _jsx(Divider, {}), _jsx(TouchableOpacity, {\n            style: {\n              padding: 20\n            },\n            onPress: function onPress() {\n              return setModalShow({\n                visible: false,\n                item: null\n              });\n            },\n            children: _jsx(Text, {\n              children: \"Cancel\"\n            })\n          })]\n        }) : null\n      })\n    }), _jsx(Snackbar, {\n      visible: isValid.boolSnack,\n      duration: 2000,\n      onDismiss: function onDismiss() {\n        setIsValid({\n          boolSnack: false\n        });\n      },\n      children: isValid.message\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'black'\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser,\n    following: store.userState.following,\n    feed: store.usersState.feed,\n    usersFollowingLoaded: store.usersState.usersFollowingLoaded\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    reload: reload,\n    sendNotification: sendNotification,\n    fetchFeedPosts: fetchFeedPosts,\n    deletePost: deletePost\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(HomeScreen);","map":{"version":3,"sources":["C:/Users/sim2a/Documents/codes/instagram-clone/screens/HomeScreen.js"],"names":["React","useEffect","useState","useRef","BottomSheet","TouchableOpacity","Divider","Snackbar","connect","bindActionCreators","deletePost","fetchFeedPosts","reload","sendNotification","Post","Header","Stories","container","utils","HomeScreen","props","navigation","posts","setPosts","refreshing","setRefreshing","unmutted","setUnmutted","inViewPort","setInViewPort","sheetRef","setSheetRef","visible","item","modalShow","setModalShow","isValid","setIsValid","usersFollowingLoaded","following","length","feed","sort","x","y","creation","toDate","i","type","setParams","param","onViewableItemsChanged","viewableItems","changed","index","current","snapTo","backgroundWhite","waitForInteraction","viewAreaCoveragePercentThreshold","toString","params","user","setUnmuttedMain","backgroundColor","flex","borderRadius","padding","navigate","uid","username","undefined","creator","auth","currentUser","then","boolSnack","message","styles","StyleSheet","create","mapStateToProps","store","userState","usersState","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect,useState,useRef } from 'react';\r\nimport { FlatList, RefreshControl, Text, View,StyleSheet } from 'react-native';\r\nimport BottomSheet from 'reanimated-bottom-sheet';\r\nimport { TouchableOpacity } from 'react-native-gesture-handler';\r\nimport { Divider, Snackbar } from 'react-native-paper';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { deletePost, fetchFeedPosts, reload, sendNotification } from '../redux/actions/index';\r\nimport Post from '../components/home/Post';\r\nimport Header from '../components/home/Header';\r\nimport Stories from '../components/home/Stories';\r\nimport { container, utils } from '../components/styles'\r\n\r\nfunction HomeScreen(props) {\r\n  const navigation = props.navigation;\r\n  const [posts,setPosts] = useState([])\r\n  const [refreshing, setRefreshing] = useState(false)\r\n  const [unmutted, setUnmutted] = useState(null)\r\n  const [inViewPort, setInViewPort] = useState(0)\r\n  const [sheetRef, setSheetRef] = useState(useRef(null))\r\n  const [modalShow, setModalShow] = useState({ visible: false, item: null })\r\n  const [isValid, setIsValid] = useState(true);\r\n\r\n  useEffect( () => {    \r\n      if (props.usersFollowingLoaded == props.following.length && props.following.length !== 0) {\r\n        props.feed.sort(function (x, y) {\r\n            return y.creation.toDate() - x.creation.toDate();\r\n        })\r\n\r\n        setPosts(props.feed);\r\n        setRefreshing(false)\r\n        for (let i = 0; i < props.feed.length; i++) {\r\n            if (props.feed[i].type == 0) {\r\n                setUnmutted(i)\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    navigation.setParams({ param: \"value\" })\r\n  },[props.usersFollowingLoaded, props.feed])\r\n\r\n  const onViewableItemsChanged = useRef(({ viewableItems, changed }) => {\r\n    if (changed && changed.length > 0) {\r\n        setInViewPort(changed[0].index);\r\n    }\r\n  });\r\n\r\n  if (posts.length == 0) {\r\n    return (<View />)\r\n  }\r\n\r\n  if (sheetRef.current !== null) {\r\n      if (modalShow.visible) {\r\n          sheetRef.snapTo(0)\r\n      } else {\r\n          sheetRef.snapTo(1)\r\n      }\r\n  }\r\n\r\n  return (\r\n      <View style={[container.container, utils.backgroundWhite]}>\r\n\r\n          <FlatList\r\n              refreshControl={\r\n                  <RefreshControl\r\n                      refreshing={refreshing}\r\n                      onRefresh={() => {\r\n                          setRefreshing(true);\r\n                          props.reload()\r\n                      }}\r\n                  />\r\n              }\r\n              onViewableItemsChanged={onViewableItemsChanged.current}\r\n              viewabilityConfig={{\r\n                  waitForInteraction: false,\r\n                  viewAreaCoveragePercentThreshold: 70\r\n              }}\r\n              numColumns={1}\r\n              horizontal={false}\r\n              data={posts}\r\n              keyExtractor={(item, index) => index.toString()}\r\n\r\n              renderItem={({ item, index }) => (\r\n                  <View key={index}>\r\n                      <Post route={{ params: { user: item.user, item, index, unmutted, inViewPort, setUnmuttedMain: setUnmutted, setModalShow, feed: true } }} navigation={props.navigation} />\r\n                  </View>\r\n              )}\r\n          />\r\n\r\n          <BottomSheet\r\n              bottomSheerColor=\"#FFFFFF\"\r\n              ref={setSheetRef}\r\n              initialPosition={0} //200, 300\r\n              snapPoints={[300, 0]}\r\n              isBackDrop={true}\r\n              isBackDropDismissByPress={true}\r\n              isRoundBorderWithTipHeader={true}\r\n              backDropColor=\"black\"\r\n              isModal\r\n              containerStyle={{ backgroundColor: \"white\" }}\r\n              tipStyle={{ backgroundColor: \"white\" }}\r\n              headerStyle={{ backgroundColor: \"white\", flex: 1 }}\r\n              bodyStyle={{ backgroundColor: \"white\", flex: 1, borderRadius: 20 }}\r\n              body={\r\n\r\n                  \r\n                      <>\r\n                      {modalShow.item != null ?\r\n                          <View>\r\n                              <TouchableOpacity style={{ padding: 20 }}\r\n                                  onPress={() => {\r\n                                      props.navigation.navigate(\"ProfileScreen\", { uid: modalShow.item.user.uid, username: undefined });\r\n                                      setModalShow({ visible: false, item: null });\r\n                                  }}>\r\n                                  <Text >Profile</Text>\r\n                              </TouchableOpacity>\r\n                              <Divider />\r\n                              {modalShow.item.creator == auth.currentUser.uid ?\r\n                                  <TouchableOpacity style={{ padding: 20 }}\r\n                                      onPress={() => {\r\n                                          props.deletePost(modalShow.item).then(() => {\r\n                                              setRefreshing(true);\r\n                                              props.reload()\r\n                                          })\r\n                                          setModalShow({ visible: false, item: null });\r\n                                      }}>\r\n                                      <Text >Delete</Text>\r\n                                  </TouchableOpacity>\r\n                                  : null}\r\n\r\n                              <Divider />\r\n                              <TouchableOpacity style={{ padding: 20 }} onPress={() => setModalShow({ visible: false, item: null })}>\r\n                                  <Text >Cancel</Text>\r\n                              </TouchableOpacity>\r\n                          </View>\r\n                          : null}\r\n                      </>\r\n\r\n              }\r\n          />\r\n          <Snackbar\r\n              visible={isValid.boolSnack}\r\n              duration={2000}\r\n              onDismiss={() => { setIsValid({ boolSnack: false }) }}>\r\n              {isValid.message}\r\n          </Snackbar>\r\n      </View>\r\n\r\n  )\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n      backgroundColor: 'black'\r\n  }\r\n});\r\n\r\nconst mapStateToProps = (store) => ({\r\n  currentUser: store.userState.currentUser,\r\n  following: store.userState.following,\r\n  feed: store.usersState.feed,\r\n  usersFollowingLoaded: store.usersState.usersFollowingLoaded\r\n})\r\n\r\nconst mapDispatchProps = (dispatch) => bindActionCreators({ reload, sendNotification, fetchFeedPosts, deletePost }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(HomeScreen);"]},"metadata":{},"sourceType":"module"}