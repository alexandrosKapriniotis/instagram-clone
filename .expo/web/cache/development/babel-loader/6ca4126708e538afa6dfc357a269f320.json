{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { collection, doc, getDocs, orderBy, query, serverTimestamp, setDoc } from 'firebase/firestore';\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { auth, db } from \"../firebase\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchUsersData } from \"../redux/actions/index\";\nimport { timeDifference } from \"../components/utils\";\nimport { container, text, utils } from \"../components/styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction CommentsScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      postId = _useState4[0],\n      setPostId = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      textInput = _useState6[0],\n      setTextInput = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      input = _useState8[0],\n      setInput = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      refresh = _useState10[0],\n      setRefresh = _useState10[1];\n\n  useEffect(function () {\n    return getComments();\n  }, [props.route.params.postId, props.users, refresh]);\n\n  var matchUserToComment = function matchUserToComment(comments) {\n    var _loop = function _loop(i) {\n      if (comments[i].hasOwnProperty('user')) {\n        return \"continue\";\n      }\n\n      var user = props.users.find(function (x) {\n        return x.uid === comments[i].creator;\n      });\n\n      if (user == undefined) {\n        props.fetchUsersData(comments[i].creator, false);\n      } else {\n        comments[i].user = user;\n      }\n    };\n\n    for (var i = 0; i < comments.length; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n    }\n\n    setComments(comments);\n    setRefresh(false);\n  };\n\n  var getComments = function getComments() {\n    if (props.route.params.postId !== postId || refresh) {\n      var userPostsCollectionRef = collection(db, \"posts\", props.route.params.uid, \"userPosts\");\n      var commentsCollectionRef = collection(userPostsCollectionRef, props.route.params.postId, \"comments\");\n\n      var _comments;\n\n      getDocs(query(commentsCollectionRef, orderBy(\"creation\", \"desc\"))).then(function (snapshot) {\n        _comments = snapshot.docs.map(function (doc) {\n          var data = doc.data();\n          var id = doc.id;\n          return _objectSpread({\n            id: id\n          }, data);\n        });\n        matchUserToComment(_comments);\n      }).catch(function (err) {\n        console.error(\"Failed to retrieve data\", err);\n      });\n      setPostId(props.route.params.postId);\n    } else {\n      matchUserToComment(comments);\n    }\n  };\n\n  var onCommentSend = function onCommentSend() {\n    var textToSend = input;\n\n    if (input.length == 0) {\n      return;\n    }\n\n    setInput(\"\");\n    textInput.clear();\n    var userPostsCollectionRef = collection(db, \"posts\", props.route.params.uid, \"userPosts\");\n    var commentsCollectionRef = collection(userPostsCollectionRef, props.route.params.postId, \"comments\");\n    setDoc(doc(commentsCollectionRef), {\n      creator: auth.currentUser.uid,\n      body: textToSend,\n      creation: serverTimestamp()\n    }).then(function () {\n      setRefresh(true);\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  };\n\n  return _jsxs(View, {\n    style: [container.container, container.alignItemsCenter, utils.backgroundWhite],\n    children: [_jsx(FlatList, {\n      numColumns: 1,\n      horizontal: false,\n      data: comments,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(View, {\n          style: utils.padding10,\n          children: item.user !== undefined ? _jsxs(View, {\n            style: container.horizontal,\n            children: [item.user.image == 'default' ? _jsx(FontAwesome5, {\n              style: [utils.profileImageSmall],\n              name: \"user-circle\",\n              size: 35,\n              color: \"black\",\n              onPress: function onPress() {\n                return props.navigation.navigate(\"Profile\", {\n                  uid: item.user.uid,\n                  username: undefined\n                });\n              }\n            }) : _jsx(Image, {\n              style: [utils.profileImageSmall],\n              source: {\n                uri: item.user.profile_picture\n              },\n              onPress: function onPress() {\n                return props.navigation.navigate(\"Profile\", {\n                  uid: item.user.uid,\n                  username: undefined\n                });\n              }\n            }), _jsxs(View, {\n              style: {\n                marginRight: 30\n              },\n              children: [_jsxs(Text, {\n                style: [utils.margin15Right, utils.margin5Bottom, {\n                  flexWrap: 'wrap'\n                }],\n                children: [_jsx(Text, {\n                  style: [text.bold],\n                  onPress: function onPress() {\n                    return props.navigation.navigate(\"Profile\", {\n                      uid: item.user.uid,\n                      username: undefined\n                    });\n                  },\n                  children: item.user.username\n                }), \" \", \"  \", item.body]\n              }), _jsx(Text, {\n                style: [text.grey, text.small, utils.margin5Bottom],\n                children: timeDifference(new Date(), item.creation.toDate())\n              })]\n            })]\n          }) : null\n        });\n      }\n    }), _jsx(View, {\n      style: [utils.borderTopGray],\n      children: _jsxs(View, {\n        style: [container.horizontal, utils.padding10, utils.alignItemsCenter, utils.backgroundWhite],\n        children: [props.currentUser.profile_picture == 'default' ? _jsx(FontAwesome5, {\n          style: [utils.profileImageSmall],\n          name: \"user-circle\",\n          size: 35,\n          color: \"black\"\n        }) : _jsx(Image, {\n          style: [utils.profileImageSmall],\n          source: {\n            uri: props.currentUser.profile_picture\n          }\n        }), _jsxs(View, {\n          style: [container.horizontal, utils.justifyCenter, utils.alignItemsCenter],\n          children: [_jsx(TextInput, {\n            ref: function ref(input) {\n              setTextInput(input);\n            },\n            value: input,\n            multiline: true,\n            style: [container.fillHorizontal, container.input, container.container],\n            placeholder: \"comment...\",\n            onChangeText: function onChangeText(input) {\n              return setInput(input);\n            }\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return onCommentSend();\n            },\n            style: {\n              width: 100,\n              alignSelf: 'center'\n            },\n            children: _jsx(Text, {\n              style: [text.bold, text.medium, text.deepskyblue],\n              children: \"Post\"\n            })\n          })]\n        })]\n      })\n    })]\n  });\n}\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    users: store.usersState.users,\n    currentUser: store.userState.currentUser\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUsersData: fetchUsersData\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(CommentsScreen);","map":{"version":3,"sources":["C:/Users/sim2a/Documents/codes/instagram-clone/screens/CommentsScreen.js"],"names":["collection","doc","getDocs","orderBy","query","serverTimestamp","setDoc","React","useState","useEffect","auth","db","connect","bindActionCreators","fetchUsersData","timeDifference","container","text","utils","CommentsScreen","props","comments","setComments","postId","setPostId","textInput","setTextInput","input","setInput","refresh","setRefresh","getComments","route","params","users","matchUserToComment","i","hasOwnProperty","user","find","x","uid","creator","undefined","length","userPostsCollectionRef","commentsCollectionRef","then","snapshot","docs","map","data","id","catch","err","console","error","onCommentSend","textToSend","clear","currentUser","body","creation","log","alignItemsCenter","backgroundWhite","item","padding10","horizontal","image","profileImageSmall","navigation","navigate","username","uri","profile_picture","marginRight","margin15Right","margin5Bottom","flexWrap","bold","grey","small","Date","toDate","borderTopGray","justifyCenter","fillHorizontal","width","alignSelf","medium","deepskyblue","mapStateToProps","store","usersState","userState","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import { collection, doc, getDocs, orderBy, query, serverTimestamp, setDoc } from 'firebase/firestore';\r\nimport React,{ useState,useEffect } from 'react';\r\nimport { View, StyleSheet, Text,FlatList,Button,TextInput,Image,TouchableOpacity } from 'react-native';\r\n\r\nimport { auth, db } from '../firebase';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { fetchUsersData } from '../redux/actions/index';\r\n\r\nimport { timeDifference } from '../components/utils';\r\nimport { container, text, utils } from '../components/styles';\r\n\r\nfunction CommentsScreen(props) {\r\n  const [comments,setComments] = useState([])\r\n  const [postId, setPostId] = useState(\"\")\r\n  const [textInput, setTextInput] = useState(null)\r\n  const [input, setInput] = useState(\"\")\r\n  const [refresh, setRefresh] = useState(false)\r\n\r\n  useEffect(() => {\r\n    return getComments();\r\n  },[props.route.params.postId,props.users,refresh]);\r\n\r\n  const matchUserToComment = (comments) => {\r\n    for (let i = 0; i < comments.length; i++) {\r\n        if (comments[i].hasOwnProperty('user')) {\r\n            continue;\r\n        }\r\n\r\n        const user = props.users.find(x => x.uid === comments[i].creator)\r\n        if (user == undefined) {\r\n            props.fetchUsersData(comments[i].creator, false)\r\n        } else {\r\n            comments[i].user = user\r\n        }\r\n    }\r\n    setComments(comments)\r\n    setRefresh(false)\r\n}\r\n\r\nconst getComments = () => {\r\n    if(props.route.params.postId !== postId || refresh) {\r\n        const userPostsCollectionRef = collection(db,\"posts\",props.route.params.uid,\"userPosts\");\r\n        const commentsCollectionRef  = collection(userPostsCollectionRef,props.route.params.postId,\"comments\");\r\n\r\n        let comments;\r\n\r\n        getDocs(query(commentsCollectionRef,orderBy(\"creation\",\"desc\"))).then((snapshot) => {\r\n            comments = snapshot.docs.map(doc => {\r\n                const data = doc.data();\r\n                const id = doc.id;\r\n                return {id, ...data}\r\n            })  \r\n            matchUserToComment(comments)                                                  \r\n        }).catch((err) => {\r\n            console.error(\"Failed to retrieve data\", err);\r\n        });\r\n        \r\n        setPostId(props.route.params.postId)    \r\n    } else {\r\n        matchUserToComment(comments)\r\n    }\r\n}\r\n\r\n  const onCommentSend = () => {\r\n    const textToSend = input;\r\n\r\n    if (input.length == 0) {\r\n        return;\r\n    }\r\n    setInput(\"\");\r\n\r\n    textInput.clear()\r\n    const userPostsCollectionRef = collection(db,\"posts\",props.route.params.uid,\"userPosts\");\r\n    const commentsCollectionRef  = collection(userPostsCollectionRef,props.route.params.postId,\"comments\");\r\n\r\n    setDoc(doc(commentsCollectionRef),{\r\n        creator: auth.currentUser.uid,\r\n        body: textToSend,\r\n        creation: serverTimestamp() \r\n    }).then(() => {\r\n        setRefresh(true)\r\n    }).catch( error => console.log(error));\r\n  }\r\n  \r\n  return (\r\n    <View style={[container.container, container.alignItemsCenter, utils.backgroundWhite]}>\r\n        <FlatList\r\n            numColumns={1}\r\n            horizontal={false}\r\n            data={comments}\r\n            renderItem={({ item }) => (\r\n                <View style={utils.padding10}>\r\n                    {item.user !== undefined ?\r\n                        <View style={container.horizontal}>\r\n                            {item.user.image == 'default' ?\r\n                                (\r\n                                    <FontAwesome5\r\n                                        style={[utils.profileImageSmall]}\r\n                                        name=\"user-circle\" size={35} color=\"black\"\r\n                                        onPress={() => props.navigation.navigate(\"Profile\", { uid: item.user.uid, username: undefined })} />\r\n                                )\r\n                                :\r\n                                (\r\n                                    <Image\r\n                                        style={[utils.profileImageSmall]}\r\n                                        source={{\r\n                                            uri: item.user.profile_picture\r\n                                        }}\r\n                                        onPress={() => props.navigation.navigate(\"Profile\", { uid: item.user.uid, username: undefined })} />\r\n                                )\r\n                            }\r\n                            <View style={{ marginRight: 30 }}>\r\n                                <Text style={[utils.margin15Right, utils.margin5Bottom, { flexWrap: 'wrap' }]}>\r\n\r\n                                    <Text style={[text.bold]}\r\n                                        onPress={() => props.navigation.navigate(\"Profile\", { uid: item.user.uid, username: undefined })}>\r\n                                        {item.user.username}\r\n                                    </Text>\r\n                                    {\" \"}  {item.body}\r\n                                </Text>\r\n                                <Text\r\n                                    style={[text.grey, text.small, utils.margin5Bottom]}>\r\n                                    {timeDifference(new Date(), item.creation.toDate())}\r\n                                </Text>\r\n                            </View>\r\n\r\n\r\n                        </View>\r\n                        : null}\r\n\r\n\r\n                </View>\r\n            )\r\n            }\r\n        />\r\n        <View style={[utils.borderTopGray]}>\r\n            < View style={[container.horizontal, utils.padding10, utils.alignItemsCenter, utils.backgroundWhite]} >\r\n                {\r\n                    props.currentUser.profile_picture == 'default' ?\r\n                        (\r\n                            <FontAwesome5\r\n                                style={[utils.profileImageSmall]}\r\n                                name=\"user-circle\" size={35} color=\"black\" />\r\n\r\n                        )\r\n                        :\r\n                        (\r\n                            <Image\r\n                                style={[utils.profileImageSmall]}\r\n                                source={{\r\n                                    uri: props.currentUser.profile_picture\r\n                                }}\r\n                            />\r\n                        )\r\n                }\r\n                <View style={[container.horizontal, utils.justifyCenter, utils.alignItemsCenter]}>\r\n                    < TextInput\r\n                        ref={input => { setTextInput(input) }}\r\n                        value={input}\r\n                        multiline={true}\r\n                        style={[container.fillHorizontal, container.input, container.container]}\r\n                        placeholder='comment...'\r\n                        onChangeText={(input) => setInput(input)} />\r\n\r\n                    < TouchableOpacity\r\n                        onPress={() => onCommentSend()}\r\n                        style={{ width: 100, alignSelf: 'center' }}>\r\n                        <Text style={[text.bold, text.medium, text.deepskyblue]} >Post</Text>\r\n                    </TouchableOpacity >\r\n                </View>\r\n\r\n            </View >\r\n        </View>\r\n\r\n    </View >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (store) => ({    \r\n    users: store.usersState.users,\r\n    currentUser: store.userState.currentUser\r\n})\r\n\r\nconst mapDispatchProps = (dispatch) => bindActionCreators({ fetchUsersData }, dispatch);\r\n  \r\nexport default connect(mapStateToProps, mapDispatchProps)(CommentsScreen)\r\n"]},"metadata":{},"sourceType":"module"}