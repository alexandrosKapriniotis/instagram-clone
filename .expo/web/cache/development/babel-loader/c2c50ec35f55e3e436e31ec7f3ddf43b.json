{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, CLEAR_DATA, USER_CHATS_STATE_CHANGE } from \"../constants\";\nimport { Constants } from 'react-native-unimodules';\nimport { auth, db } from \"../../firebase\";\nimport { collection, doc, getDocs, getDoc, onSnapshot, query, orderBy, deleteDoc, updateDoc, where } from \"firebase/firestore\";\nvar unsubscribe = [];\nexport function clearData() {\n  return function (dispatch) {\n    for (var i = unsubscribe; i < unsubscribe.length; i++) {\n      unsubscribe[i]();\n    }\n\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function reload() {\n  return function (dispatch) {\n    dispatch(clearData());\n    dispatch(fetchUser());\n    dispatch(setNotificationService());\n    dispatch(fetchUserPosts());\n    dispatch(fetchUserFollowing());\n    dispatch(fetchUserChats());\n  };\n}\nexport var setNotificationService = function setNotificationService() {\n  return function _callee(dispatch) {\n    var token, existingStatus, finalStatus, status;\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!Constants.isDevice) {\n              _context2.next = 18;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n          case 3:\n            existingStatus = _context2.sent;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus.status !== 'granted')) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n          case 8:\n            status = _context2.sent;\n            finalStatus = status;\n\n          case 10:\n            if (!(finalStatus.status !== 'granted')) {\n              _context2.next = 13;\n              break;\n            }\n\n            alert('Failed to get push token for push notification!');\n            return _context2.abrupt(\"return\");\n\n          case 13:\n            _context2.next = 15;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 15:\n            token = _context2.sent;\n            _context2.next = 19;\n            break;\n\n          case 18:\n            alert('Must use physical device for Push Notifications');\n\n          case 19:\n            if (Platform.OS === 'android') {\n              Notifications.setNotificationChannelAsync('default', {\n                name: 'default',\n                importance: Notifications.AndroidImportance.MAX,\n                vibrationPattern: [0, 250, 250, 250],\n                lightColor: '#FF231F7C'\n              });\n            }\n\n            Notifications.setNotificationHandler({\n              handleNotification: function handleNotification() {\n                return _regeneratorRuntime.async(function handleNotification$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        return _context.abrupt(\"return\", {\n                          shouldShowAlert: true,\n                          shouldPlaySound: false,\n                          shouldSetBadge: false\n                        });\n\n                      case 1:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }\n            });\n\n            if (token != undefined) {\n              updateDoc(doc(db, \"users\", auth.currentUser.uid), {\n                notificationToken: token.data\n              });\n            }\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var sendNotification = function sendNotification(to, title, body, data) {\n  return function (dispatch) {\n    if (to == null) {\n      return;\n    }\n\n    var response = fetch('https://exp.host/--/api/v2/push/send', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        to: to,\n        sound: 'default',\n        title: title,\n        body: body,\n        data: data\n      })\n    });\n  };\n};\nexport function fetchUser() {\n  return function (dispatch) {\n    var docRef = doc(db, \"users\", auth.currentUser.uid);\n    getDoc(docRef).then(function (snapshot) {\n      if (snapshot.exists()) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: _objectSpread({\n            uid: auth.currentUser.uid\n          }, snapshot.data())\n        });\n      } else {\n        console.log('user does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    var docRef = doc(db, \"posts\", auth.currentUser.uid);\n    getDocs(query(collection(docRef, \"userPosts\"), orderBy(\"creation\", \"desc\"))).then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    }).catch(function (err) {\n      console.error(\"Failed to retrieve data\", err);\n    });\n  };\n}\nexport function fetchUserChats() {\n  return function (dispatch) {\n    var listener = onSnapshot(query(collection(\"chats\"), where(\"users\", \"array-contains\", auth.currentUser.uid), orderBy(\"lastMessageTimestamp\", \"desc\"))).then(function (snapshot) {\n      var chats = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n\n      for (var i = 0; i < chats.length; i++) {\n        var otherUserId = void 0;\n\n        if (chats[i].users[0] == auth.currentUser.uid) {\n          otherUserId = chats[i].users[1];\n        } else {\n          otherUserId = chats[i].users[0];\n        }\n\n        dispatch(fetchUsersData(otherUserId, false));\n      }\n\n      dispatch({\n        type: USER_CHATS_STATE_CHANGE,\n        chats: chats\n      });\n    });\n    unsubscribe.push(listener);\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    var docRef = doc(db, \"following\", auth.currentUser.uid);\n    onSnapshot(collection(docRef, \"userFollowing\"), function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i], true));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      var usersRef = doc(db, \"users\", uid);\n      getDoc(usersRef).then(function (snapshot) {\n        if (snapshot.exists()) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        } else {\n          console.log('does not exist');\n        }\n      });\n\n      if (getPosts) {\n        dispatch(fetchUsersFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    var docRef = doc(db, \"posts\", uid);\n    getDocs(query(collection(docRef, \"userPosts\"), orderBy(\"creation\", \"asc\"))).then(function (snapshot) {\n      var uid = snapshot.docs[0].ref.path.split('/')[1];\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    }).catch(function (err) {\n      console.error(\"Failed to retrieve data\", err);\n    });\n  };\n}\nexport function fetchUsersFollowingLikes(uid, postId) {\n  return function (dispatch, getState) {\n    var currentUserRef = doc(db, \"posts\", uid, \"userPosts\", postId, \"likes\", auth.currentUser.uid);\n    var listener = onSnapshot(currentUserRef, function (snapshot) {\n      var postId = snapshot.id;\n      var currentUserLike = false;\n\n      if (snapshot.exists) {\n        currentUserLike = true;\n      }\n\n      dispatch({\n        type: USERS_LIKES_STATE_CHANGE,\n        postId: postId,\n        currentUserLike: currentUserLike\n      });\n    });\n    unsubscribe.push(listener);\n  };\n}\nexport function queryUsersByUsername(username) {\n  return function (dispatch, getState) {\n    return new Promise(function (resolve, reject) {\n      if (username.length == 0) {\n        resolve([]);\n      }\n\n      firebase.firestore().collection('users').where('username', '>=', username).limit(10).get().then(function (snapshot) {\n        var users = snapshot.docs.map(function (doc) {\n          var data = doc.data();\n          var id = doc.id;\n          return _objectSpread({\n            id: id\n          }, data);\n        });\n        resolve(users);\n      });\n    });\n  };\n}\nexport function deletePost(item) {\n  return function (dispatch, getState) {\n    return new Promise(function (resolve, reject) {\n      var itemRef = doc(db, \"posts\", auth.currentUser.uid, \"userPosts\", item.id);\n      deleteDoc(itemRef).then(function () {\n        resolve();\n      }).catch(function () {\n        reject();\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/sim2a/Documents/codes/instagram-clone/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","CLEAR_DATA","USER_CHATS_STATE_CHANGE","Constants","auth","db","collection","doc","getDocs","getDoc","onSnapshot","query","orderBy","deleteDoc","updateDoc","where","unsubscribe","clearData","dispatch","i","length","type","reload","fetchUser","setNotificationService","fetchUserPosts","fetchUserFollowing","fetchUserChats","isDevice","Notifications","getPermissionsAsync","existingStatus","finalStatus","status","requestPermissionsAsync","alert","getExpoPushTokenAsync","token","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","undefined","currentUser","uid","notificationToken","data","sendNotification","to","title","body","response","fetch","method","headers","Accept","JSON","stringify","sound","docRef","then","snapshot","exists","console","log","posts","docs","map","id","catch","err","error","listener","chats","otherUserId","users","fetchUsersData","push","following","getPosts","getState","found","usersState","some","el","usersRef","user","fetchUsersFollowingPosts","ref","path","split","find","fetchUsersFollowingLikes","postId","currentUserRef","currentUserLike","USERS_LIKES_STATE_CHANGE","queryUsersByUsername","username","Promise","resolve","reject","firebase","firestore","limit","get","deletePost","item","itemRef"],"mappings":"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","sourcesContent":["import { USER_STATE_CHANGE,USER_POSTS_STATE_CHANGE,USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, CLEAR_DATA, USER_CHATS_STATE_CHANGE } from '../constants';\r\nimport { Constants } from 'react-native-unimodules';\r\n\r\nimport { auth,db } from '../../firebase';\r\nimport { collection, doc, getDocs,getDoc, onSnapshot, query, orderBy, deleteDoc, updateDoc, where } from \"firebase/firestore\";\r\n\r\nlet unsubscribe = [];\r\n\r\nexport function clearData() {\r\n    return ((dispatch) => {\r\n        for (let i = unsubscribe; i < unsubscribe.length; i++) {\r\n            unsubscribe[i]();\r\n        }\r\n        dispatch({ type: CLEAR_DATA })\r\n    })\r\n}\r\nexport function reload() {\r\n    return ((dispatch) => {\r\n        dispatch(clearData())\r\n        dispatch(fetchUser())\r\n        dispatch(setNotificationService())\r\n        dispatch(fetchUserPosts())\r\n        dispatch(fetchUserFollowing())\r\n        dispatch(fetchUserChats())\r\n\r\n    })\r\n}\r\n\r\nexport const setNotificationService = () => async dispatch => {\r\n    let token;\r\n    if (Constants.isDevice) {\r\n        const existingStatus = await Notifications.getPermissionsAsync();\r\n        let finalStatus = existingStatus;\r\n        if (existingStatus.status !== 'granted') {\r\n            const status = await Notifications.requestPermissionsAsync();\r\n            finalStatus = status;\r\n        }\r\n\r\n        if (finalStatus.status !== 'granted') {\r\n            alert('Failed to get push token for push notification!');\r\n            return;\r\n        }\r\n        token = (await Notifications.getExpoPushTokenAsync());\r\n    } else {\r\n        alert('Must use physical device for Push Notifications');\r\n    }\r\n\r\n    if (Platform.OS === 'android') {\r\n        Notifications.setNotificationChannelAsync('default', {\r\n            name: 'default',\r\n            importance: Notifications.AndroidImportance.MAX,\r\n            vibrationPattern: [0, 250, 250, 250],\r\n            lightColor: '#FF231F7C',\r\n        });\r\n    }\r\n\r\n    Notifications.setNotificationHandler({\r\n        handleNotification: async () => ({\r\n            shouldShowAlert: true,\r\n            shouldPlaySound: false,\r\n            shouldSetBadge: false,\r\n        }),\r\n    });\r\n\r\n    if (token != undefined) {\r\n        \r\n        updateDoc(doc(db,\"users\",auth.currentUser.uid),{\r\n            notificationToken: token.data,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const sendNotification = (to, title, body, data) => dispatch => {\r\n    if (to == null) {\r\n        return;\r\n    }\r\n\r\n    let response = fetch('https://exp.host/--/api/v2/push/send', {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            to,\r\n            sound: 'default',\r\n            title,\r\n            body,\r\n            data\r\n        })\r\n    })\r\n\r\n}\r\n\r\nexport function fetchUser() {\r\n    return ((dispatch) => {\r\n        const docRef = doc(db,\"users\",auth.currentUser.uid );\r\n        \r\n        getDoc(docRef).then((snapshot) => {                    \r\n            if (snapshot.exists()) {                \r\n                dispatch({\r\n                    type: USER_STATE_CHANGE,\r\n                    currentUser: {\r\n                        uid: auth.currentUser.uid, \r\n                        ...snapshot.data()\r\n                    }\r\n                })\r\n            } else {\r\n                console.log('user does not exist')\r\n            }\r\n        })            \r\n    })\r\n}\r\n\r\nexport function fetchUserPosts() {\r\n    return ((dispatch) => {\r\n\r\n        const docRef = doc(db, \"posts\", auth.currentUser.uid);\r\n        \r\n        getDocs(query(collection(docRef,\"userPosts\"),orderBy(\"creation\",\"desc\"))).then((snapshot) => {\r\n            \r\n            let posts = snapshot.docs.map(doc => {\r\n                const data = doc.data();\r\n                const id = doc.id;\r\n                return { id, ...data }\r\n            })\r\n               \r\n            dispatch({ \r\n                type: USER_POSTS_STATE_CHANGE, \r\n                posts \r\n            })                   \r\n        }).catch((err) => {\r\n            console.error(\"Failed to retrieve data\", err);\r\n        });                 \r\n    })\r\n}\r\n\r\nexport function fetchUserChats() {\r\n    return ((dispatch) => {\r\n        let listener = \r\n        onSnapshot(\r\n            query(collection(\"chats\"), \r\n            where(\"users\", \"array-contains\", auth.currentUser.uid),\r\n            orderBy(\"lastMessageTimestamp\", \"desc\"))).\r\n            then( snapshot => {\r\n                let chats = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                });\r\n                for (let i = 0; i < chats.length; i++) {\r\n                    let otherUserId;\r\n                    if (chats[i].users[0] == auth.currentUser.uid) {\r\n                        otherUserId = chats[i].users[1];\r\n                    } else {\r\n                        otherUserId = chats[i].users[0];\r\n                    }\r\n                    dispatch(fetchUsersData(otherUserId, false))\r\n                }\r\n\r\n                dispatch({ type: USER_CHATS_STATE_CHANGE, chats });\r\n            });\r\n            \r\n        unsubscribe.push(listener)\r\n    })\r\n}\r\n\r\nexport function fetchUserFollowing() {\r\n    return ((dispatch) => {\r\n\r\n        const docRef = doc(db, \"following\", auth.currentUser.uid);\r\n        \r\n        onSnapshot(collection(docRef,\"userFollowing\"), (snapshot) => {\r\n            let following = snapshot.docs.map(doc => {\r\n                const id = doc.id;\r\n                return id;\r\n            });\r\n            dispatch({ \r\n                type: USER_FOLLOWING_STATE_CHANGE, \r\n                following \r\n            })\r\n            \r\n            for (let i = 0; i < following.length; i++) {                \r\n                dispatch(fetchUsersData(following[i],true));\r\n            }\r\n        })                                                                       \r\n    })\r\n}\r\n\r\nexport function fetchUsersData(uid,getPosts) {\r\n    return ((dispatch,getState) => {\r\n        \r\n        const found = getState().usersState.users.some(el => el.uid === uid);\r\n        \r\n        if (!found) {            \r\n            const usersRef = doc(db, \"users\", uid);\r\n\r\n            getDoc(usersRef).then((snapshot) => {                    \r\n                if (snapshot.exists()) {                \r\n                    let user = snapshot.data();\r\n                    user.uid = snapshot.id;\r\n\r\n                    dispatch({ type: USERS_DATA_STATE_CHANGE, user });                                       \r\n                } else {\r\n                    console.log('does not exist')\r\n                }\r\n            })                \r\n            if (getPosts) {\r\n                dispatch(fetchUsersFollowingPosts(uid));\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function fetchUsersFollowingPosts(uid) {\r\n    return ((dispatch,getState) => {\r\n\r\n        const docRef = doc(db, \"posts\", uid);\r\n        getDocs(query(collection(docRef,\"userPosts\"),orderBy(\"creation\",\"asc\"))).then((snapshot) => {\r\n            // const uid = snapshot.query.EP.path.segments[1];\r\n            const uid = snapshot.docs[0].ref.path.split('/')[1];\r\n\r\n            const user = getState().usersState.users.find(el => el.uid === uid);\r\n\r\n            let posts = snapshot.docs.map(doc => {\r\n                const data = doc.data();\r\n                const id = doc.id;\r\n                return { id, ...data, user }\r\n            })\r\n            \r\n            dispatch({ \r\n                type: USERS_POSTS_STATE_CHANGE, \r\n                posts,\r\n                uid \r\n            })\r\n            \r\n        }).catch((err) => {\r\n            console.error(\"Failed to retrieve data\", err);\r\n        });                 \r\n    })\r\n}\r\n\r\nexport function fetchUsersFollowingLikes(uid, postId) {\r\n    return ((dispatch, getState) => {\r\n        const currentUserRef = doc(db,\"posts\",uid,\"userPosts\",postId,\"likes\",auth.currentUser.uid);\r\n\r\n        let listener = onSnapshot(currentUserRef, (snapshot) => {\r\n            const postId = snapshot.id;\r\n\r\n            let currentUserLike = false;\r\n            if (snapshot.exists) {\r\n                currentUserLike = true;\r\n            }\r\n\r\n            dispatch({ type: USERS_LIKES_STATE_CHANGE, postId, currentUserLike })\r\n        });\r\n\r\n        unsubscribe.push(listener)\r\n    })\r\n}\r\n\r\nexport function queryUsersByUsername(username) {\r\n    return ((dispatch, getState) => {\r\n        return new Promise((resolve, reject) => {\r\n            if (username.length == 0) {\r\n                resolve([])\r\n            }\r\n            firebase.firestore()\r\n                .collection('users')\r\n                .where('username', '>=', username)\r\n                .limit(10)\r\n                .get()\r\n                .then((snapshot) => {\r\n                    let users = snapshot.docs.map(doc => {\r\n                        const data = doc.data();\r\n                        const id = doc.id;\r\n                        return { id, ...data }\r\n                    });\r\n                    resolve(users);\r\n                })\r\n        })\r\n    })\r\n}\r\n\r\nexport function deletePost(item) {\r\n    return ((dispatch, getState) => {\r\n        return new Promise((resolve, reject) => {\r\n            const itemRef = doc(db,\"posts\",auth.currentUser.uid,\"userPosts\",item.id)\r\n\r\n            deleteDoc(itemRef).then(() => {\r\n                resolve();\r\n            }).catch(() => {\r\n                reject();\r\n            })\r\n        })\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}